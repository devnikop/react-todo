{"version":3,"sources":["serviceWorker.js","styles/variables.js","styles/global.css.tsx","state/task/index.ts","helpers/helpers.ts","state/reducers.ts","state/configureStore.ts","components/Tabs/Tabs.tsx","styles/mixins.js","components/Task/Task.tsx","helpers/useEditStatus.tsx","components/TaskEdit/InputDate.tsx","components/TaskEdit/InputTitle.tsx","components/TaskEdit/TextareaDescription.tsx","components/TaskEdit/TaskEdit.tsx","components/TaskWrapper/TaskWrapper.tsx","components/Tasks/Tasks.tsx","components/NewTask/NewTask.tsx","state/task/selectors.ts","components/TasksGroup/TasksGroup.tsx","components/App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Color","createGlobalStyle","Group","getTaskBackgroundColor","deadline","moment","isBefore","add","getRandomDeadline","Math","round","random","subtract","format","initialState","tasks","id","nanoid","description","group","TODO","title","DOING","DONE","createSlice","name","reducers","addTask","state","action","concat","payload","deleteTask","filter","task","updateTitle","taskId","findIndex","updateDate","date","updateDescription","updateGroup","rootReducer","combineReducers","taskReducer","reducer","store","configureStore","StyledNavLink","styled","NavLink","StyledTabs","className","to","StyledTask","onClick","dateTime","useInputEditStatus","isEdit","setIsEdit","ref","useRef","useEffect","handleDocumentEscape","e","code","current","focus","document","addEventListener","removeEventListener","DateEdit","input","attrs","type","DatePresentation","InputDate","value","onValueChange","onBlur","onChange","target","defaultValue","onFocus","TitleEdit","TitlePresentation","InputTitle","onKeyDown","key","placeholder","DescriptionEdit","textarea","DescriptionPresentation","TextareaDescription","useTextareaEditStatus","StyledTaskEdit","onDeleteClick","onLeaveClick","taskDescription","taskTitle","dispatch","useDispatch","useState","setDate","isDateEdit","setDateEdit","setDescription","isDescriptionEdit","setDescriptionEdit","setTitle","isTitleEdit","setTitleEdit","actions","newValue","TaskWrapper","StyledTasks","map","Input","NewTask","setTaskTitle","inputRef","addNewTask","onSubmit","preventDefault","getAllTasks","getDoingTasks","createSelector","getDoneTasks","getTodoTasks","TypeMap","Map","styledTasksGroup","useSelector","get","getDefaultTasks","getTasksSelector","shallowEqual","length","App","path","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a098dfba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const Color = {\n  grey1: `#ebecf0`,\n  blue1: `#9daae0`,\n  blue2: `#d3daf5`,\n  green1: `#93d67c`,\n\n  blueShadow1: `rgba(9, 30, 66, 0.25)`,\n\n  deadlineOk: `#ffffff`,\n  warning: `#f2d600`,\n  overdue: `#eb5a46`,\n};\n\nexport { Color };\n","import { createGlobalStyle } from \"styled-components\";\nimport { Color } from \"./variables\";\n\nexport default createGlobalStyle`\n  body {\n    margin: 0;\n\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    background-color: ${Color.green1};\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  .visually-hidden {\n    position: absolute;\n    height: 1px;\n    width: 1px;\n    overflow: hidden;\n    clip: rect(1px, 1px, 1px, 1px);\n    white-space: nowrap; /* added line */\n  }\n`;\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\n\nimport { getRandomDeadline } from \"../../helpers/helpers\";\n\nexport enum Group {\n  DOING = `DOING`,\n  DONE = `DONE`,\n  TODO = `TODO`,\n}\n\nexport interface TaskType {\n  deadline: string;\n  title: string;\n}\n\nexport interface TaskEditType {\n  deadline: string;\n  description: string;\n  group: Group;\n  id: string;\n  title: string;\n}\n\nexport type IState = {\n  tasks: Array<TaskEditType>;\n};\n\nconst initialState: IState = {\n  tasks: [\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.TODO,\n      title: `Todo task header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.TODO,\n      title: `Todo task 2 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.TODO,\n      title: `Todo task 3 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.TODO,\n      title: `Todo task 4 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DOING,\n      title: `Doing task header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DOING,\n      title: `Doing task2 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DOING,\n      title: `Doing task 3 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DONE,\n      title: `Done task header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DONE,\n      title: `Done task 2 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DONE,\n      title: `Done task 3 header`,\n    },\n  ],\n};\n\nconst addTask: CaseReducer<IState, PayloadAction<TaskEditType>> = (\n  state,\n  action\n) => ({\n  ...state,\n  tasks: state.tasks.concat(action.payload),\n});\n\nconst deleteTask: CaseReducer<IState, PayloadAction<string>> = (\n  state,\n  action\n) => ({\n  ...state,\n  tasks: state.tasks.filter((task) => task.id !== action.payload),\n});\n\nconst updateTitle: CaseReducer<\n  IState,\n  PayloadAction<{ id: string; title: string }>\n> = (state, action) => {\n  const { id, title } = action.payload;\n  const taskId = state.tasks.findIndex((task) => task.id === id);\n  state.tasks[taskId].title = title;\n};\n\nconst updateDate: CaseReducer<\n  IState,\n  PayloadAction<{ id: string; date: string }>\n> = (state, action) => {\n  const { id, date } = action.payload;\n  const taskId = state.tasks.findIndex((task) => task.id === id);\n  state.tasks[taskId].deadline = date;\n};\n\nconst updateDescription: CaseReducer<\n  IState,\n  PayloadAction<{ id: string; description: string }>\n> = (state, action) => {\n  const { id, description } = action.payload;\n  const taskId = state.tasks.findIndex((task) => task.id === id);\n  state.tasks[taskId].description = description;\n};\n\nconst updateGroup: CaseReducer<\n  IState,\n  PayloadAction<{ id: string; group: Group }>\n> = (state, action) => {\n  const { id, group } = action.payload;\n  const taskId = state.tasks.findIndex((task) => task.id === id);\n  state.tasks[taskId].group = group;\n};\n\nexport const tasks = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n    addTask,\n    deleteTask,\n    updateTitle,\n    updateDate,\n    updateDescription,\n    updateGroup,\n  },\n});\n","import moment from \"moment\";\n\nimport { Color } from \"../styles/variables\";\n\nconst getTaskBackgroundColor = (deadline: string): string => {\n  if (moment(deadline, `D MMM`).isBefore(moment())) {\n    return Color.overdue;\n  }\n  if (moment(deadline, `D MMM`).isBefore(moment().add(3, `d`))) {\n    return Color.warning;\n  }\n\n  return Color.deadlineOk;\n};\n\nconst getRandomDeadline = (): string =>\n  moment()\n    .add(Math.round(Math.random() * 7), `d`)\n    .subtract(2, `d`)\n    .format(`D MMM`);\n\nexport { getTaskBackgroundColor, getRandomDeadline };\n","import { combineReducers } from \"redux\";\n\nimport { tasks } from \"./task/index\";\n\nconst rootReducer = combineReducers({\n  taskReducer: tasks.reducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport default store;\r\n","import { NavLink } from \"react-router-dom\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Color } from \"../../styles/variables\";\nimport { resetList } from \"../../styles/mixins\";\n\nconst Tabs: React.FC<{ className?: string }> = ({ className }) => {\n  return (\n    <section className={className}>\n      <h2 className=\"visually-hidden\">Task groups</h2>\n      <ul>\n        <li>\n          <StyledNavLink to=\"/todo\">To do</StyledNavLink>\n        </li>\n        <li>\n          <StyledNavLink to=\"/doing\">Doing</StyledNavLink>\n        </li>\n        <li>\n          <StyledNavLink to=\"/done\">Done</StyledNavLink>\n        </li>\n      </ul>\n    </section>\n  );\n};\n\nconst StyledNavLink = styled(NavLink)`\n  display: block;\n  padding: 5px 10px;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: inherit;\n  background-color: ${Color.blue2};\n\n  transition: background-color 200ms;\n\n  &:hover,\n  &:focus {\n    background-color: ${Color.grey1};\n    cursor: pointer;\n  }\n\n  &:active {\n    filter: opacity(70%);\n  }\n\n  &.active {\n    background-color: ${Color.blue1};\n    pointer-events: none;\n    box-shadow: inset 0 1px 0 ${Color.blueShadow1};\n\n    &:focus {\n      background-color: ${Color.blue1};\n    }\n  }\n`;\n\nconst StyledTabs = styled(Tabs)`\n  ul {\n    ${resetList()}\n\n    display: flex;\n    flex-wrap: wrap;\n    width: fit-content;\n  }\n\n  li {\n    flex-shrink: 0;\n  }\n`;\n\nexport default StyledTabs;\n","const getDefaultInput = () => `\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nconst resetButton = () => `\n  padding: 0;\n\n  color: inherit;\n  font: inherit;\n\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\nconst resetInput = () => `\n  padding: 0;\n\n  border: none;\n  background: none;\n`;\n\nconst resetList = () => `\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nconst resetTextarea = () => `\n  padding: 0;\n\n  border: none;\n  background: none;\n\n  resize: none;\n`;\n\nexport { getDefaultInput, resetButton, resetInput, resetList, resetTextarea };\n","import moment from \"moment\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Color } from \"../../styles/variables\";\nimport { getTaskBackgroundColor } from \"../../helpers/helpers\";\nimport { TaskType } from \"../../state/task\";\n\ninterface Props extends TaskType {\n  onClick: () => void;\n}\n\nconst Task: React.FC<Props & { className?: string }> = ({\n  className,\n  deadline,\n  title,\n  onClick,\n}) => {\n  return (\n    <section className={className} onClick={onClick}>\n      <h3>{title}</h3>\n      <time dateTime={moment(deadline, `D MMM`).format(`YYYY-M-D`)}>\n        {deadline}\n      </time>\n    </section>\n  );\n};\n\nconst StyledTask = styled(Task)`\n  display: grid;\n  grid-auto-flow: column;\n  gap: 5%;\n  justify-content: space-between;\n  padding: 10px;\n\n  background-color: ${({ deadline }) => getTaskBackgroundColor(deadline)};\n  border-radius: 3px;\n  box-shadow: 0 1px 0 ${Color.blueShadow1};\n\n  h3 {\n    margin: 0;\n\n    overflow-wrap: anywhere;\n  }\n`;\n\nexport default StyledTask;\n","import React, { useRef, useEffect } from \"react\";\n\ntype HookProps = {\n  isEdit: React.ComponentState;\n  setIsEdit: (newValue: boolean) => void;\n};\n\nconst useInputEditStatus = ({\n  isEdit,\n  setIsEdit,\n}: HookProps): React.Ref<HTMLInputElement> => {\n  const ref = useRef<HTMLInputElement | null>(null);\n  useEffect(() => {\n    const handleDocumentEscape = (e: KeyboardEvent): void => {\n      e.code === `Escape` && setIsEdit(false);\n    };\n\n    ref.current?.focus();\n    document.addEventListener(`keydown`, handleDocumentEscape);\n\n    return () => {\n      document.removeEventListener(`keydown`, handleDocumentEscape);\n    };\n  }, [isEdit, setIsEdit]);\n\n  return ref;\n};\n\nconst useTextareaEditStatus = ({\n  isEdit,\n  setIsEdit,\n}: HookProps): React.Ref<HTMLTextAreaElement> => {\n  const ref = useRef<HTMLTextAreaElement | null>(null);\n  useEffect(() => {\n    const handleDocumentEscape = (e: KeyboardEvent): void => {\n      e.code === `Escape` && setIsEdit(false);\n    };\n\n    ref.current?.focus();\n    document.addEventListener(`keydown`, handleDocumentEscape);\n\n    return () => {\n      document.removeEventListener(`keydown`, handleDocumentEscape);\n    };\n  }, [isEdit, setIsEdit]);\n\n  return ref;\n};\n\nexport { useInputEditStatus, useTextareaEditStatus };\n","import moment from \"moment\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { useInputEditStatus } from \"../../helpers/useEditStatus\";\n\ntype Props = {\n  value: string;\n  isEdit: boolean;\n  setIsEdit: (newValue: boolean) => void;\n  onValueChange: (newValue: string) => void;\n};\n\nconst InputDate: React.FC<Props> = ({\n  value,\n  isEdit,\n  setIsEdit,\n  onValueChange,\n}) => {\n  const ref = useInputEditStatus({\n    isEdit,\n    setIsEdit,\n  });\n\n  const handleDateBlur = (): void => {\n    setIsEdit(false);\n  };\n\n  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    onValueChange(moment(e.target.value, `YYYY-MM-DD`).format(`D MMM`));\n  };\n\n  const handleDateClick = (): void => {\n    setIsEdit(true);\n  };\n\n  const handleDateFocus = (): void => {\n    setIsEdit(true);\n  };\n\n  return (\n    <>\n      {isEdit ? (\n        <DateEdit\n          ref={ref}\n          value={moment(value, `D MMM`).format(`YYYY-MM-DD`)}\n          onBlur={handleDateBlur}\n          onChange={handleDateChange}\n        />\n      ) : (\n        <DatePresentation\n          defaultValue={moment(value, `D MMM`).format(`YYYY-MM-DD`)}\n          onClick={handleDateClick}\n          onFocus={handleDateFocus}\n        />\n      )}\n    </>\n  );\n};\n\nconst DateEdit = styled.input.attrs(() => ({\n  type: \"date\",\n}))``;\n\nconst DatePresentation = styled.input.attrs(() => ({\n  type: \"date\",\n}))`\n  background: none;\n  border: none;\n  appearance: none;\n\n  &::-webkit-calendar-picker-indicator {\n    display: none;\n  }\n`;\n\nexport default InputDate;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { getDefaultInput, resetInput } from \"../../styles/mixins\";\nimport { useInputEditStatus } from \"../../helpers/useEditStatus\";\n\ntype Props = {\n  value: string;\n  isEdit: boolean;\n  setIsEdit: (newValue: boolean) => void;\n  onValueChange: (newValue: string) => void;\n};\n\nconst InputTitle: React.FC<Props> = ({\n  value,\n  isEdit,\n  setIsEdit,\n  onValueChange,\n}) => {\n  const ref = useInputEditStatus({\n    isEdit,\n    setIsEdit,\n  });\n\n  const handleTitleBlur = (): void => {\n    setIsEdit(false);\n  };\n\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    onValueChange(e.target.value);\n  };\n\n  const handleTitleEnter = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    e.key === `Enter` && setIsEdit(false);\n  };\n\n  const handleTitleClick = (): void => {\n    setIsEdit(true);\n  };\n\n  const handleTitleFocus = (): void => {\n    setIsEdit(true);\n  };\n\n  return (\n    <>\n      {isEdit ? (\n        <TitleEdit\n          ref={ref}\n          value={value}\n          onBlur={handleTitleBlur}\n          onChange={handleTitleChange}\n          onKeyDown={handleTitleEnter}\n        />\n      ) : (\n        <TitlePresentation\n          defaultValue={value}\n          placeholder=\"Add task title\"\n          onClick={handleTitleClick}\n          onFocus={handleTitleFocus}\n        />\n      )}\n    </>\n  );\n};\n\nconst TitleEdit = styled.input`\n  ${getDefaultInput()}\n`;\n\nconst TitlePresentation = styled.input`\n  ${resetInput()}\n  ${getDefaultInput()}\n`;\n\nexport default InputTitle;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { resetTextarea } from \"../../styles/mixins\";\nimport { useTextareaEditStatus } from \"../../helpers/useEditStatus\";\n\ntype Props = {\n  value: string;\n  isEdit: boolean;\n  setIsEdit: (newValue: boolean) => void;\n  onValueChange: (newValue: string) => void;\n};\n\nconst TextareaDescription: React.FC<Props> = ({\n  value,\n  isEdit,\n  setIsEdit,\n  onValueChange,\n}) => {\n  const ref = useTextareaEditStatus({\n    isEdit,\n    setIsEdit,\n  });\n\n  const handleDescriptionBlur = (): void => {\n    setIsEdit(false);\n  };\n\n  const handleDesriptionChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement>\n  ): void => {\n    onValueChange(e.target.value);\n  };\n\n  const handleDescriptionEnter = (\n    e: React.KeyboardEvent<HTMLTextAreaElement>\n  ): void => {\n    e.key === `Enter` && setIsEdit(false);\n  };\n\n  const handleDescriptionClick = (): void => {\n    setIsEdit(true);\n  };\n\n  const handleDescriptionFocus = (): void => {\n    setIsEdit(true);\n  };\n\n  return (\n    <>\n      {isEdit ? (\n        <DescriptionEdit\n          ref={ref}\n          value={value}\n          placeholder=\"Add a more detailed description...\"\n          onBlur={handleDescriptionBlur}\n          onChange={handleDesriptionChange}\n          onKeyDown={handleDescriptionEnter}\n        />\n      ) : (\n        <DescriptionPresentation\n          defaultValue={value}\n          placeholder=\"Add a more detailed description...\"\n          onClick={handleDescriptionClick}\n          onFocus={handleDescriptionFocus}\n        />\n      )}\n    </>\n  );\n};\n\nconst DescriptionEdit = styled.textarea`\n  resize: vertical;\n`;\n\nconst DescriptionPresentation = styled.textarea`\n  ${resetTextarea()}\n`;\n\nexport default TextareaDescription;\n","import { useDispatch } from \"react-redux\";\nimport React, { useState, useEffect, ChangeEvent } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getTaskBackgroundColor } from \"../../helpers/helpers\";\nimport { Color } from \"../../styles/variables\";\nimport { TaskEditType, tasks, Group } from \"../../state/task\";\n\nimport InputDate from \"./InputDate\";\nimport InputTitle from \"./InputTitle\";\nimport TextareaDescription from \"./TextareaDescription\";\n\ninterface Props {\n  task: TaskEditType;\n  onDeleteClick: () => void;\n  onLeaveClick: () => void;\n}\n\nconst TaskEdit: React.FC<Props & { className?: string }> = ({\n  className,\n  task,\n  onDeleteClick,\n  onLeaveClick,\n}) => {\n  const {\n    deadline,\n    description: taskDescription,\n    group,\n    id,\n    title: taskTitle,\n  } = task;\n  const dispatch = useDispatch();\n\n  const [date, setDate] = useState<string>(deadline);\n  const [isDateEdit, setDateEdit] = useState<boolean>(!date);\n  const [description, setDescription] = useState<string>(taskDescription);\n  const [isDescriptionEdit, setDescriptionEdit] = useState<boolean>(\n    !description\n  );\n  const [title, setTitle] = useState<string>(taskTitle);\n  const [isTitleEdit, setTitleEdit] = useState<boolean>(!title);\n\n  useEffect(() => {\n    !isTitleEdit &&\n      dispatch(\n        tasks.actions.updateTitle({\n          id,\n          title,\n        })\n      );\n  }, [isTitleEdit]);\n\n  useEffect(() => {\n    !isDateEdit &&\n      dispatch(\n        tasks.actions.updateDate({\n          id,\n          date,\n        })\n      );\n  }, [isDateEdit]);\n\n  useEffect(() => {\n    !isDescriptionEdit &&\n      dispatch(\n        tasks.actions.updateDescription({\n          id,\n          description,\n        })\n      );\n  }, [isDescriptionEdit]);\n\n  const handleTitleChange = (newValue: string): void => {\n    setTitle(newValue);\n  };\n\n  const handleDateChange = (newValue: string): void => {\n    setDate(newValue);\n  };\n\n  const handleDescriptionChange = (newValue: string): void => {\n    setDescription(newValue);\n  };\n\n  const handleGroupChange = (e: ChangeEvent<HTMLSelectElement>): void => {\n    const group = e.target.value as Group;\n    dispatch(\n      tasks.actions.updateGroup({\n        id,\n        group,\n      })\n    );\n  };\n\n  return (\n    <section className={className}>\n      <InputTitle\n        value={title}\n        isEdit={isTitleEdit}\n        setIsEdit={setTitleEdit}\n        onValueChange={handleTitleChange}\n      />\n      <InputDate\n        value={date}\n        isEdit={isDateEdit}\n        setIsEdit={setDateEdit}\n        onValueChange={handleDateChange}\n      />\n      <TextareaDescription\n        value={description}\n        isEdit={isDescriptionEdit}\n        setIsEdit={setDescriptionEdit}\n        onValueChange={handleDescriptionChange}\n      />\n      <label>\n        <span>Move to </span>\n        <select value={group} onChange={handleGroupChange}>\n          <option value={Group.TODO}>To do</option>\n          <option value={Group.DONE}>Done</option>\n          <option value={Group.DOING}>Doing</option>\n        </select>\n      </label>\n      <button type=\"button\" onClick={onLeaveClick}>\n        Leave Edit mode\n      </button>\n      <button type=\"button\" onClick={onDeleteClick}>\n        Delete task\n      </button>\n    </section>\n  );\n};\n\nconst StyledTaskEdit = styled(TaskEdit)`\n  display: grid;\n  gap: 10px;\n  padding: 10px;\n\n  background-color: ${({ task }) => getTaskBackgroundColor(task.deadline)};\n  border-radius: 3px;\n  box-shadow: 0 1px 0 ${Color.blueShadow1};\n`;\n\nexport default StyledTaskEdit;\n","import { useDispatch } from \"react-redux\";\nimport React, { useState } from \"react\";\n\nimport { tasks, TaskEditType } from \"../../state/task\";\n\nimport Task from \"../Task/Task\";\nimport TaskEdit from \"../TaskEdit/TaskEdit\";\n\ntype Props = {\n  task: TaskEditType;\n};\n\nconst TaskWrapper: React.FC<Props> = ({ task }) => {\n  const dispatch = useDispatch();\n  const [isEdit, setIsEdit] = useState(false);\n\n  const handleDeleteClick = (): void => {\n    dispatch(tasks.actions.deleteTask(task.id));\n  };\n\n  const handleLeaveClick = (): void => {\n    setIsEdit(false);\n  };\n\n  const handleTaskClick = (): void => {\n    setIsEdit(true);\n  };\n\n  return isEdit ? (\n    <TaskEdit\n      task={task}\n      onDeleteClick={handleDeleteClick}\n      onLeaveClick={handleLeaveClick}\n    />\n  ) : (\n    <Task\n      deadline={task.deadline}\n      title={task.title}\n      onClick={handleTaskClick}\n    />\n  );\n};\n\nexport default TaskWrapper;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { resetList } from \"../../styles/mixins\";\nimport { TaskEditType } from \"../../state/task\";\n\nimport TaskWrapper from \"../TaskWrapper/TaskWrapper\";\n\ntype Props = {\n  tasks: Array<TaskEditType>;\n};\n\nconst Tasks: React.FC<Props & { className?: string }> = ({\n  className,\n  tasks,\n}) => {\n  return (\n    <ul className={className}>\n      {tasks.map((task) => (\n        <li key={task.id}>\n          <TaskWrapper task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst StyledTasks = styled(Tasks)`\n  ${resetList()}\n\n  display: grid;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n\nexport default StyledTasks;\n","import { nanoid } from \"nanoid\";\nimport { useDispatch } from \"react-redux\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { tasks, Group } from \"../../state/task\";\nimport { getDefaultInput } from \"../../styles/mixins\";\nimport { useInputEditStatus } from \"../../helpers/useEditStatus\";\nimport { getRandomDeadline } from \"../../helpers/helpers\";\n\nconst NewTask: React.FC<{ group: Group }> = ({ group }) => {\n  const dispatch = useDispatch();\n\n  const [isEdit, setIsEdit] = useState(false);\n  const [taskTitle, setTaskTitle] = useState(``);\n  const inputRef = useInputEditStatus({ isEdit, setIsEdit });\n\n  const addNewTask = (): void => {\n    dispatch(\n      tasks.actions.addTask({\n        id: nanoid(),\n        deadline: getRandomDeadline(),\n        description: ``,\n        group: group,\n        title: taskTitle,\n      })\n    );\n    setTaskTitle(``);\n  };\n\n  const handleFormSubmit = (e: React.SyntheticEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    taskTitle && addNewTask();\n  };\n\n  const handleInputBlur = (): void => {\n    setIsEdit(false);\n\n    taskTitle && addNewTask();\n  };\n\n  const handleTaskTitleInput = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setTaskTitle(e.target.value);\n  };\n\n  const handleButtonClick = (): void => {\n    setIsEdit(true);\n  };\n\n  return isEdit ? (\n    <form onSubmit={handleFormSubmit}>\n      <Input\n        ref={inputRef}\n        value={taskTitle}\n        placeholder=\"Add task title\"\n        onBlur={handleInputBlur}\n        onChange={handleTaskTitleInput}\n      />\n    </form>\n  ) : (\n    <button type=\"button\" onClick={handleButtonClick}>\n      Add another task\n    </button>\n  );\n};\n\nconst Input = styled.input`\n  ${getDefaultInput()}\n`;\n\nexport default NewTask;\n","import { createSelector } from \"reselect\";\n\nimport { Group, TaskEditType } from \"../../state/task/index\";\nimport { RootState } from \"../../state/reducers\";\n\ntype AllTasks = (state: RootState) => Array<TaskEditType>;\n\nconst getAllTasks: AllTasks = (state) => state.taskReducer.tasks;\n\nexport const getDoingTasks = createSelector(\n  (state: RootState) => getAllTasks(state),\n  (tasks) => tasks.filter((task) => task.group === Group.DOING)\n);\n\nexport const getDoneTasks = createSelector(\n  (state: RootState) => getAllTasks(state),\n  (tasks) => tasks.filter((task) => task.group === Group.DONE)\n);\n\nexport const getTodoTasks = createSelector(\n  (state: RootState) => getAllTasks(state),\n  (tasks) => tasks.filter((task) => task.group === Group.TODO)\n);\n","import { shallowEqual, useSelector } from \"react-redux\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Color } from \"../../styles/variables\";\n\nimport Tasks from \"../Tasks/Tasks\";\nimport NewTask from \"../NewTask/NewTask\";\n\nimport {\n  getDoingTasks,\n  getDoneTasks,\n  getTodoTasks as getDefaultTasks,\n  getTodoTasks,\n} from \"../../state/task/selectors\";\n\ntype Props = {\n  type: string;\n};\n\nconst TypeMap = new Map([\n  [`doing`, getDoingTasks],\n  [`done`, getDoneTasks],\n  [`todo`, getTodoTasks],\n]);\n\nconst getTasksSelector = (type: string): typeof getDefaultTasks =>\n  TypeMap.get(type) || getDefaultTasks;\n\nconst TasksGroup: React.FC<Props & { className?: string }> = ({\n  className,\n  type,\n}) => {\n  const tasks = useSelector(getTasksSelector(type), shallowEqual);\n\n  return (\n    <section className={className}>\n      <h2 className=\"visually-hidden\">{type} group</h2>\n      {tasks.length ? <Tasks tasks={tasks} /> : ``}\n      <NewTask group={tasks[0].group} />\n    </section>\n  );\n};\n\nconst styledTasksGroup = styled(TasksGroup)`\n  min-width: 320px;\n  max-width: 400px;\n\n  padding: 25px 15px;\n  box-sizing: border-box;\n\n  background-color: ${Color.grey1};\n  border-radius: 0 0 5px 5px;\n`;\n\nexport default styledTasksGroup;\n","import { Redirect, Route, Switch } from \"react-router-dom\";\nimport React from \"react\";\n\nimport Tabs from \"../Tabs/Tabs\";\nimport TasksGroup from \"../TasksGroup/TasksGroup\";\n\nconst App: React.FC<{ className?: string }> = ({ className }) => {\n  return (\n    <>\n      <h1>Task manager</h1>\n      <main className={className}>\n        <Tabs />\n        <Switch>\n          <Route path=\"/todo\">\n            <TasksGroup type={`todo`} />\n          </Route>\n          <Route path=\"/doing\">\n            <TasksGroup type={`doing`} />\n          </Route>\n          <Route path=\"/done\">\n            <TasksGroup type={`done`} />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/todo\"></Redirect>\n          </Route>\n        </Switch>\n      </main>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport GlobalStyles from \"./styles/global.css\";\nimport store from \"./state/configureStore\";\n\nimport App from \"./components/App/App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}