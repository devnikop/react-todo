{"version":3,"sources":["serviceWorker.js","styles/variables.js","styles/global.css.tsx","state/task/index.ts","state/task/types.ts","state/reducers.ts","state/configureStore.ts","components/Tabs/Tabs.tsx","styles/mixins.js","helpers/helpers.ts","components/Task/Task.tsx","helpers/useEditStatus.tsx","components/TaskEdit/TaskEdit.tsx","components/TaskWrapper/TaskWrapper.tsx","components/Tasks/Tasks.tsx","components/NewTask/NewTask.tsx","state/task/selectors.ts","components/TasksGroup/TasksGroup.tsx","components/App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Color","createGlobalStyle","Group","getRandomDeadline","moment","add","Math","round","random","subtract","format","initialState","tasks","id","nanoid","title","description","deadline","group","TODO","DOING","DONE","ActionCreators","task","type","payload","rootReducer","combineReducers","taskReducer","state","action","concat","filter","store","configureStore","reducer","StyledNavLink","styled","NavLink","StyledTabs","className","to","getTaskBackgroundColor","isBefore","StyledTask","onClick","dateTime","useInputEditStatus","isEdit","setIsEdit","ref","useRef","useEffect","handleDocumentEscape","e","code","current","focus","document","addEventListener","removeEventListener","TitleEdit","input","TitlePresentation","DescriptionEdit","textarea","DescriptionPresentation","StyledTaskEdit","taskTitle","taskDescription","onLeaveClick","onDeleteClick","useState","setTitle","isEditTitle","setIsEditTitle","setDescription","isEditDescription","setIsEditDescription","titleRef","descriptionRef","useTextareaEditStatus","value","onChange","target","onBlur","onKeyDown","key","defaultValue","placeholder","TaskWrapper","dispatch","useDispatch","StyledTasks","map","Input","NewTask","setTaskTitle","inputRef","addNewTask","onSubmit","preventDefault","getAllTasks","getTodoTasks","createSelector","getDoingTasks","getDoneTasks","TypeMap","Map","styledTasksGroup","useSelector","get","getDefaultTasks","getTasksSelector","shallowEqual","length","App","path","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5394bd4b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const Color = {\n  grey1: `#ebecf0`,\n  blue1: `#9daae0`,\n  blue2: `#d3daf5`,\n  green1: `#93d67c`,\n\n  blueShadow1: `rgba(9, 30, 66, 0.25)`,\n\n  deadlineOk: `#ffffff`,\n  warning: `#f2d600`,\n  overdue: `#eb5a46`,\n};\n\nexport { Color };\n","import { createGlobalStyle } from \"styled-components\";\nimport { Color } from \"./variables\";\n\nexport default createGlobalStyle`\n  body {\n    margin: 0;\n\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    background-color: ${Color.green1};\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  .visually-hidden {\n    position: absolute;\n    height: 1px;\n    width: 1px;\n    overflow: hidden;\n    clip: rect(1px, 1px, 1px, 1px);\n    white-space: nowrap; /* added line */\n  }\n`;\n","import { nanoid } from \"nanoid\";\nimport moment from \"moment\";\nimport { ADD_TASK, DELETE_TASK } from \"./types\";\n\nexport enum Group {\n  TODO = `TODO`,\n  DOING = `DOING`,\n  DONE = `DONE`,\n}\n\nexport interface TaskType {\n  deadline: string;\n  title: string;\n}\n\nexport interface TaskEditType {\n  deadline: string;\n  description: string;\n  title: string;\n}\n\nexport interface TaskTypeExt extends TaskEditType {\n  group: Group;\n  id: string;\n}\n\nexport type IState = {\n  tasks: Array<TaskTypeExt>;\n};\n\nexport const getRandomDeadline = (): string =>\n  moment()\n    .add(Math.round(Math.random() * 7), `d`)\n    .subtract(2, `d`)\n    .format(`D MMM`);\n\nconst initialState: IState = {\n  tasks: [\n    {\n      id: nanoid(),\n      title: `Task header`,\n      description: `Task description`,\n      deadline: getRandomDeadline(),\n      group: Group.TODO,\n    },\n    {\n      id: nanoid(),\n      title: `Task header`,\n      description: `Task description`,\n      deadline: getRandomDeadline(),\n      group: Group.DOING,\n    },\n    {\n      id: nanoid(),\n      title: `Task header`,\n      description: `Task description`,\n      deadline: getRandomDeadline(),\n      group: Group.DONE,\n    },\n  ],\n};\n\nconst ActionCreators = {\n  addTask: (task: TaskTypeExt) => ({\n    type: ADD_TASK,\n    payload: task,\n  }),\n  deleteTask: (id: string) => ({\n    type: DELETE_TASK,\n    payload: id,\n  }),\n};\n\nconst reducer = (\n  state = initialState,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case ADD_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.concat(action.payload),\n      };\n    case DELETE_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.filter((task) => task.id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n\nexport { ActionCreators, reducer };\n","export const ADD_TASK = `ADD_TASK`;\nexport const DELETE_TASK = `DELETE_TASK`;\n","import { combineReducers } from \"redux\";\r\n\r\nimport { reducer as taskReducer } from \"./task/index\";\r\n\r\nconst rootReducer = combineReducers({\r\n  taskReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport default store;\r\n","import { NavLink } from \"react-router-dom\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { resetList } from \"../../styles/mixins\";\nimport { Color } from \"../../styles/variables\";\n\nconst Tabs: React.FC<{ className?: string }> = ({ className }) => {\n  return (\n    <section className={className}>\n      <h2 className=\"visually-hidden\">Task groups</h2>\n      <ul>\n        <li>\n          <StyledNavLink to=\"/todo\">To do</StyledNavLink>\n        </li>\n        <li>\n          <StyledNavLink to=\"/doing\">Doing</StyledNavLink>\n        </li>\n        <li>\n          <StyledNavLink to=\"/done\">Done</StyledNavLink>\n        </li>\n      </ul>\n    </section>\n  );\n};\n\nconst StyledNavLink = styled(NavLink)`\n  display: block;\n  padding: 5px 10px;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: inherit;\n  background-color: ${Color.blue2};\n\n  transition: background-color 200ms;\n\n  &:hover,\n  &:focus {\n    background-color: ${Color.grey1};\n    cursor: pointer;\n  }\n\n  &:active {\n    filter: opacity(70%);\n  }\n\n  &.active {\n    background-color: ${Color.blue1};\n    pointer-events: none;\n    box-shadow: inset 0 1px 0 ${Color.blueShadow1};\n\n    &:focus {\n      background-color: ${Color.blue1};\n    }\n  }\n`;\n\nconst StyledTabs = styled(Tabs)`\n  ul {\n    ${resetList()}\n\n    display: flex;\n    flex-wrap: wrap;\n    width: fit-content;\n  }\n\n  li {\n    flex-shrink: 0;\n  }\n`;\n\nexport default StyledTabs;\n","const resetButton = () => `\n  padding: 0;\n\n  color: inherit;\n  font: inherit;\n\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\nconst resetList = () => `\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nconst resetInput = () => `\n  padding: 0;\n\n  border: none;\n  background: none;\n`;\n\nconst resetTextarea = () => `\n  padding: 0;\n\n  border: none;\n  background: none;\n\n  resize: none;\n`;\n\nconst getDefaultInput = () => `\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nexport {\n  resetButton,\n  resetList,\n  resetInput,\n  resetTextarea,\n  getDefaultInput,\n};\n","import moment from \"moment\";\n\nimport { Color } from \"../styles/variables\";\n\nconst getTaskBackgroundColor = (deadline: string): string => {\n  if (moment(deadline, `D MMM`).isBefore(moment())) {\n    return Color.overdue;\n  }\n  if (moment(deadline, `D MMM`).isBefore(moment().add(3, `d`))) {\n    return Color.warning;\n  }\n\n  return Color.deadlineOk;\n};\n\nexport { getTaskBackgroundColor };\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\n\nimport { TaskType } from \"../../state/task\";\nimport { Color } from \"../../styles/variables\";\nimport { getTaskBackgroundColor } from \"../../helpers/helpers\";\n\ninterface Props extends TaskType {\n  onClick: () => void;\n}\n\nconst Task: React.FC<Props & { className?: string }> = ({\n  className,\n  deadline,\n  title,\n  onClick,\n}) => {\n  return (\n    <section className={className} onClick={onClick}>\n      <h3>{title}</h3>\n      <time dateTime={moment(deadline, `D MMM`).format(`YYYY-M-D`)}>\n        {deadline}\n      </time>\n    </section>\n  );\n};\n\nconst StyledTask = styled(Task)`\n  display: grid;\n  grid-auto-flow: column;\n  gap: 5%;\n  justify-content: space-between;\n  padding: 10px;\n\n  background-color: ${({ deadline }) => getTaskBackgroundColor(deadline)};\n  border-radius: 3px;\n  box-shadow: 0 1px 0 ${Color.blueShadow1};\n\n  h3 {\n    margin: 0;\n\n    overflow-wrap: anywhere;\n  }\n`;\n\nexport default StyledTask;\n","import React, { useRef, useEffect } from \"react\";\n\ntype HookProps = {\n  isEdit: React.ComponentState;\n  setIsEdit: (newValue: boolean) => void;\n};\n\nconst useInputEditStatus = ({\n  isEdit,\n  setIsEdit,\n}: HookProps): React.Ref<HTMLInputElement> => {\n  const ref = useRef<HTMLInputElement | null>(null);\n  useEffect(() => {\n    const handleDocumentEscape = (e: KeyboardEvent): void => {\n      e.code === `Escape` && setIsEdit(false);\n    };\n\n    ref.current?.focus();\n    document.addEventListener(`keydown`, handleDocumentEscape);\n\n    return () => {\n      document.removeEventListener(`keydown`, handleDocumentEscape);\n    };\n  }, [isEdit, setIsEdit]);\n\n  return ref;\n};\n\nconst useTextareaEditStatus = ({\n  isEdit,\n  setIsEdit,\n}: HookProps): React.Ref<HTMLTextAreaElement> => {\n  const ref = useRef<HTMLTextAreaElement | null>(null);\n  useEffect(() => {\n    const handleDocumentEscape = (e: KeyboardEvent): void => {\n      e.code === `Escape` && setIsEdit(false);\n    };\n\n    ref.current?.focus();\n    document.addEventListener(`keydown`, handleDocumentEscape);\n\n    return () => {\n      document.removeEventListener(`keydown`, handleDocumentEscape);\n    };\n  }, [isEdit, setIsEdit]);\n\n  return ref;\n};\n\nexport { useInputEditStatus, useTextareaEditStatus };\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getTaskBackgroundColor } from \"../../helpers/helpers\";\nimport { Color } from \"../../styles/variables\";\nimport { TaskEditType } from \"../../state/task\";\nimport {\n  useTextareaEditStatus,\n  useInputEditStatus,\n} from \"../../helpers/useEditStatus\";\nimport {\n  resetInput,\n  resetTextarea,\n  getDefaultInput,\n} from \"../../styles/mixins\";\n\ninterface Props extends TaskEditType {\n  onLeaveClick: () => void;\n  onDeleteClick: () => void;\n}\n\nconst TaskEdit: React.FC<Props & { className?: string }> = ({\n  className,\n  title: taskTitle,\n  description: taskDescription,\n  deadline,\n  onLeaveClick,\n  onDeleteClick,\n}) => {\n  const [title, setTitle] = useState<string>(taskTitle);\n  const [isEditTitle, setIsEditTitle] = useState<boolean>(!title);\n  const [description, setDescription] = useState<string>(taskDescription);\n  const [isEditDescription, setIsEditDescription] = useState<boolean>(\n    !taskDescription\n  );\n\n  const titleRef = useInputEditStatus({\n    isEdit: isEditTitle,\n    setIsEdit: setIsEditTitle,\n  });\n  const descriptionRef = useTextareaEditStatus({\n    isEdit: isEditDescription,\n    setIsEdit: setIsEditDescription,\n  });\n\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setTitle(e.target.value);\n  };\n\n  const handleTitleBlur = () => {\n    setIsEditTitle(false);\n  };\n\n  const handleTitleEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    e.key === `Enter` && setIsEditTitle(false);\n  };\n\n  const handleTitleClick = (): void => {\n    setIsEditTitle(true);\n  };\n\n  const handleDescriptionClick = () => {\n    setIsEditDescription(true);\n  };\n\n  const handleDesriptionChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement>\n  ): void => {\n    setDescription(e.target.value);\n  };\n\n  const handleDescriptionEnter = (\n    e: React.KeyboardEvent<HTMLTextAreaElement>\n  ): void => {\n    e.key === `Enter` && setIsEditDescription(false);\n  };\n\n  const handleDescriptionBlur = (): void => {\n    setIsEditDescription(false);\n  };\n\n  return (\n    <section className={className}>\n      {isEditTitle ? (\n        <TitleEdit\n          ref={titleRef}\n          value={title}\n          onChange={handleTitleChange}\n          onBlur={handleTitleBlur}\n          onKeyDown={handleTitleEnter}\n        />\n      ) : (\n        <TitlePresentation\n          defaultValue={title}\n          placeholder=\"Add task title\"\n          onClick={handleTitleClick}\n        />\n      )}\n      <time dateTime={deadline}>{deadline}</time>\n      {isEditDescription ? (\n        <DescriptionEdit\n          ref={descriptionRef}\n          value={description}\n          placeholder=\"Add a more detailed description...\"\n          onChange={handleDesriptionChange}\n          onBlur={handleDescriptionBlur}\n          onKeyDown={handleDescriptionEnter}\n        />\n      ) : (\n        <DescriptionPresentation\n          defaultValue={description}\n          placeholder=\"Add a more detailed description...\"\n          onClick={handleDescriptionClick}\n        />\n      )}\n      <button type=\"button\" onClick={onLeaveClick}>\n        Leave Edit mode\n      </button>\n      <button type=\"button\" onClick={onDeleteClick}>\n        Delete task\n      </button>\n    </section>\n  );\n};\n\nconst TitleEdit = styled.input`\n  ${getDefaultInput()}\n`;\n\nconst TitlePresentation = styled.input`\n  ${resetInput()}\n  ${getDefaultInput()}\n`;\n\nconst DescriptionEdit = styled.textarea`\n  resize: vertical;\n`;\n\nconst DescriptionPresentation = styled.textarea`\n  ${resetTextarea()}\n`;\n\nconst StyledTaskEdit = styled(TaskEdit)`\n  display: grid;\n  gap: 10px;\n  padding: 10px;\n\n  background-color: ${({ deadline }) => getTaskBackgroundColor(deadline)};\n  border-radius: 3px;\n  box-shadow: 0 1px 0 ${Color.blueShadow1};\n\n  time {\n    padding: 5px 0;\n  }\n`;\n\nexport default StyledTaskEdit;\n","import React, { useState } from \"react\";\n\nimport Task from \"../Task/Task\";\nimport TaskEdit from \"../TaskEdit/TaskEdit\";\n\nimport { TaskTypeExt, ActionCreators } from \"../../state/task\";\nimport { useDispatch } from \"react-redux\";\n\ntype Props = {\n  task: TaskTypeExt;\n};\n\nconst TaskWrapper: React.FC<Props> = ({ task }) => {\n  const dispatch = useDispatch();\n  const [isEdit, setIsEdit] = useState(false);\n\n  const handleTaskClick = () => {\n    setIsEdit(true);\n  };\n\n  const handleLeaveClick = () => {\n    setIsEdit(false);\n  };\n\n  const handleDeleteClick = () => {\n    dispatch(ActionCreators.deleteTask(task.id));\n  };\n\n  return isEdit ? (\n    <TaskEdit\n      deadline={task.deadline}\n      description={task.description}\n      title={task.title}\n      onLeaveClick={handleLeaveClick}\n      onDeleteClick={handleDeleteClick}\n    />\n  ) : (\n    <Task\n      deadline={task.deadline}\n      title={task.title}\n      onClick={handleTaskClick}\n    />\n  );\n};\n\nexport default TaskWrapper;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport TaskWrapper from \"../TaskWrapper/TaskWrapper\";\nimport { resetList } from \"../../styles/mixins\";\nimport { TaskTypeExt } from \"../../state/task\";\n\ntype Props = {\n  tasks: Array<TaskTypeExt>;\n};\n\nconst Tasks: React.FC<Props & { className?: string }> = ({\n  className,\n  tasks,\n}) => {\n  return (\n    <ul className={className}>\n      {tasks.map((task) => (\n        <li key={task.id}>\n          <TaskWrapper task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst StyledTasks = styled(Tasks)`\n  ${resetList()}\n\n  display: grid;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n\nexport default StyledTasks;\n","import React, { FC, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\nimport styled from \"styled-components\";\n\nimport { useInputEditStatus } from \"../../helpers/useEditStatus\";\nimport { ActionCreators, Group, getRandomDeadline } from \"../../state/task\";\nimport { getDefaultInput } from \"../../styles/mixins\";\n\nconst NewTask: FC = () => {\n  const dispatch = useDispatch();\n\n  const [isEdit, setIsEdit] = useState(false);\n  const [taskTitle, setTaskTitle] = useState(``);\n  const inputRef = useInputEditStatus({ isEdit, setIsEdit });\n\n  const addNewTask = () => {\n    dispatch(\n      ActionCreators.addTask({\n        id: nanoid(),\n        title: taskTitle,\n        description: ``,\n        deadline: getRandomDeadline(),\n        group: Group.TODO,\n      })\n    );\n    setTaskTitle(``);\n  };\n\n  const handleFormSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    taskTitle && addNewTask();\n  };\n\n  const handleTaskTitleInput = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setTaskTitle(e.target.value);\n  };\n\n  const handleInputBlur = (): void => {\n    setIsEdit(false);\n\n    taskTitle && addNewTask();\n  };\n\n  const handleButtonClick = (): void => {\n    setIsEdit(true);\n  };\n\n  return isEdit ? (\n    <form onSubmit={handleFormSubmit}>\n      <Input\n        ref={inputRef}\n        value={taskTitle}\n        placeholder=\"Add task title\"\n        onBlur={handleInputBlur}\n        onChange={handleTaskTitleInput}\n      />\n    </form>\n  ) : (\n    <button type=\"button\" onClick={handleButtonClick}>\n      Add another task\n    </button>\n  );\n};\n\nconst Input = styled.input`\n  ${getDefaultInput()}\n`;\n\nexport default NewTask;\n","import { createSelector } from \"reselect\";\r\n\r\nimport { TaskTypeExt } from \"../../state/task/index\";\r\nimport { RootState } from \"../../state/reducers\";\r\nimport { Group } from \"../../state/task/index\";\r\n\r\ntype AllTasks = (state: RootState) => Array<TaskTypeExt>;\r\n\r\nconst getAllTasks: AllTasks = (state) => state.taskReducer.tasks;\r\n\r\nexport const getTodoTasks = createSelector(\r\n  (state: RootState) => getAllTasks(state),\r\n  (tasks) => tasks.filter((task) => task.group === Group.TODO)\r\n);\r\n\r\nexport const getDoingTasks = createSelector(\r\n  (state: RootState) => getAllTasks(state),\r\n  (tasks) => tasks.filter((task) => task.group === Group.DOING)\r\n);\r\n\r\nexport const getDoneTasks = createSelector(\r\n  (state: RootState) => getAllTasks(state),\r\n  (tasks) => tasks.filter((task) => task.group === Group.DONE)\r\n);\r\n","import { useSelector, shallowEqual } from \"react-redux\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Color } from \"../../styles/variables\";\n\nimport Tasks from \"../Tasks/Tasks\";\nimport NewTask from \"../NewTask/NewTask\";\n\nimport {\n  getDoingTasks,\n  getDoneTasks,\n  getTodoTasks as getDefaultTasks,\n  getTodoTasks,\n} from \"../../state/task/selectors\";\n\ntype Props = {\n  type: string;\n};\n\nconst TypeMap = new Map([\n  [`todo`, getTodoTasks],\n  [`doing`, getDoingTasks],\n  [`done`, getDoneTasks],\n]);\n\nconst getTasksSelector = (type: string): typeof getDefaultTasks =>\n  TypeMap.get(type) || getDefaultTasks;\n\nconst TasksGroup: React.FC<Props & { className?: string }> = ({\n  className,\n  type,\n}) => {\n  const tasks = useSelector(getTasksSelector(type), shallowEqual);\n\n  return (\n    <section className={className}>\n      <h2 className=\"visually-hidden\">{type} group</h2>\n      {tasks.length ? <Tasks tasks={tasks} /> : ``}\n      <NewTask />\n    </section>\n  );\n};\n\nconst styledTasksGroup = styled(TasksGroup)`\n  padding: 25px 15px;\n\n  background-color: ${Color.grey1};\n  border-radius: 0 0 5px 5px;\n`;\n\nexport default styledTasksGroup;\n","import { Switch, Route, Redirect } from \"react-router-dom\";\nimport React from \"react\";\n\nimport Tabs from \"../Tabs/Tabs\";\nimport TasksGroup from \"../TasksGroup/TasksGroup\";\n\nconst App: React.FC<{ className?: string }> = ({ className }) => {\n  return (\n    <>\n      <h1>Task manager</h1>\n      <main className={className}>\n        <Tabs />\n        <Switch>\n          <Route path=\"/todo\">\n            <TasksGroup type={`todo`} />\n          </Route>\n          <Route path=\"/doing\">\n            <TasksGroup type={`doing`} />\n          </Route>\n          <Route path=\"/done\">\n            <TasksGroup type={`done`} />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/todo\"></Redirect>\n          </Route>\n        </Switch>\n      </main>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport GlobalStyles from \"./styles/global.css\";\nimport store from \"./state/configureStore\";\n\nimport App from \"./components/App/App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}