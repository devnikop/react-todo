{"version":3,"sources":["components/Task/Task.tsx","components/Tasks/Tasks.tsx","styles/mixins.js","components/App/App.tsx","styles/variables.js","serviceWorker.js","styles/global.css.tsx","index.tsx"],"names":["StyledTask","styled","article","Task","title","description","deadline","dateTime","StyledTasks","ul","Tasks","tasks","map","task","key","id","TaskGroupWrapper","div","App","todoTasks","filter","group","Group","TODO","doingTasks","DOING","doneTasks","DONE","Boolean","window","location","hostname","match","createGlobalStyle","nanoid","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"weAWA,IAAMA,EAAaC,IAAOC,QAAV,KA2BDC,EAVe,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACnD,OACE,kBAACN,EAAD,KACE,4BAAKI,GACL,2BAAIC,GACJ,0BAAME,SAAUD,GAAWA,K,8ECjBjC,IAAME,EAAcP,IAAOQ,GAAV,IChBC,wDDoCHC,EAhBgB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChC,OACE,kBAACH,EAAD,KACGG,EAAMC,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,EAAKE,IACZ,kBAAC,EAAD,CACEX,MAAOS,EAAKT,MACZC,YAAaQ,EAAKR,YAClBC,SAAUO,EAAKP,iB,uTEjB3B,IAAMU,EAAmBf,IAAOgB,IAAV,ICVd,WDsDOC,EA1Bc,SAAC,GAAe,IAAbP,EAAY,EAAZA,MACxBQ,EAAYR,EAAMS,QAAO,SAACP,GAAD,OAAUA,EAAKQ,QAAUC,EAAMC,QACxDC,EAAab,EAAMS,QAAO,SAACP,GAAD,OAAUA,EAAKQ,QAAUC,EAAMG,SACzDC,EAAYf,EAAMS,QAAO,SAACP,GAAD,OAAUA,EAAKQ,QAAUC,EAAMK,QAE9D,OACE,oCACE,4CACA,kBAACX,EAAD,KACE,iCACE,qCACA,kBAAC,EAAD,CAAOL,MAAOQ,KAEhB,iCACE,qCACA,kBAAC,EAAD,CAAOR,MAAOa,KAEhB,iCACE,oCACA,kBAAC,EAAD,CAAOb,MAAOe,QEpCJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gZChBSC,ICMHX,EDNGW,cAAf,M,SCMYX,K,YAAAA,E,cAAAA,E,aAAAA,M,KAMZ,IAAMX,EAAQ,CACZ,CACEI,GAAImB,cACJ9B,MAAM,cACNC,YAAY,mBACZC,SAAS,QACTe,MAAOC,EAAMC,MAEf,CACER,GAAImB,cACJ9B,MAAM,cACNC,YAAY,mBACZC,SAAS,QACTe,MAAOC,EAAMG,OAEf,CACEV,GAAImB,cACJ9B,MAAM,cACNC,YAAY,mBACZC,SAAS,QACTe,MAAOC,EAAMK,OAIjBQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAK1B,MAAOA,KAEd2B,SAASC,eAAe,SFwFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.719654b4.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nexport interface TaskType {\n  title: string;\n  description: string;\n  deadline: string;\n}\n\ntype Props = TaskType;\n\nconst StyledTask = styled.article`\n  padding: 10px;\n\n  background-color: #ffffff;\n  border-radius: 3px;\n\n  h3 {\n    margin: 0;\n    margin-bottom: 20px;\n  }\n\n  p {\n    margin: 0;\n    margin-bottom: 10px;\n  }\n`;\n\nconst Task: React.FC<Props> = ({ title, description, deadline }) => {\n  return (\n    <StyledTask>\n      <h3>{title}</h3>\n      <p>{description}</p>\n      <time dateTime={deadline}>{deadline}</time>\n    </StyledTask>\n  );\n};\n\nexport default Task;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Task, { TaskType } from \"../Task/Task\";\nimport { resetList } from \"../../styles/mixins\";\nimport { Group } from \"../../index\";\n\nexport interface TaskTypeExt extends TaskType {\n  id: string;\n  group: Group;\n}\n\ntype Props = {\n  tasks: Array<TaskTypeExt>;\n};\n\nconst StyledTasks = styled.ul`\n  ${resetList()}\n`;\n\nconst Tasks: React.FC<Props> = ({ tasks }) => {\n  return (\n    <StyledTasks>\n      {tasks.map((task) => (\n        <li key={task.id}>\n          <Task\n            title={task.title}\n            description={task.description}\n            deadline={task.deadline}\n          />\n        </li>\n      ))}\n    </StyledTasks>\n  );\n};\n\nexport default Tasks;\n","const resetList = () => `\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport { resetList };\n","import React, { useState } from \"react\";\n\nimport Tasks, { TaskTypeExt } from \"../Tasks/Tasks\";\nimport { Group } from \"../..\";\nimport styled from \"styled-components\";\nimport { Color } from \"../../styles/variables\";\n\ntype Props = {\n  tasks: Array<TaskTypeExt>;\n};\n\nconst TaskGroupWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, minmax(100px, 300px));\n  gap: 5%;\n\n  section {\n    padding: 15px;\n\n    background-color: ${Color.grey1};\n    border-radius: 5px;\n  }\n\n  h2 {\n    margin: 0;\n    margin-bottom: 5px;\n  }\n`;\n\nconst App: React.FC<Props> = ({ tasks }) => {\n  const todoTasks = tasks.filter((task) => task.group === Group.TODO);\n  const doingTasks = tasks.filter((task) => task.group === Group.DOING);\n  const doneTasks = tasks.filter((task) => task.group === Group.DONE);\n\n  return (\n    <>\n      <h1>Task manager</h1>\n      <TaskGroupWrapper>\n        <section>\n          <h2>To Do</h2>\n          <Tasks tasks={todoTasks} />\n        </section>\n        <section>\n          <h2>Doing</h2>\n          <Tasks tasks={doingTasks} />\n        </section>\n        <section>\n          <h2>Done</h2>\n          <Tasks tasks={doneTasks} />\n        </section>\n      </TaskGroupWrapper>\n    </>\n  );\n};\n\nexport default App;\n","const Color = {\n  grey1: `#ebecf0`,\n};\n\nexport { Color };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n  body {\n    margin: 0;\n\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    background-color: #519839;\n  }\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { nanoid } from \"nanoid\";\n\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport GlobalStyles from \"./styles/global.css\";\n\nexport enum Group {\n  TODO = `TODO`,\n  DOING = `DOING`,\n  DONE = `DONE`,\n}\n\nconst tasks = [\n  {\n    id: nanoid(),\n    title: `Task header`,\n    description: `Task description`,\n    deadline: `20:00`,\n    group: Group.TODO,\n  },\n  {\n    id: nanoid(),\n    title: `Task header`,\n    description: `Task description`,\n    deadline: `20:00`,\n    group: Group.DOING,\n  },\n  {\n    id: nanoid(),\n    title: `Task header`,\n    description: `Task description`,\n    deadline: `20:00`,\n    group: Group.DONE,\n  },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App tasks={tasks} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}