{"version":3,"sources":["serviceWorker.js","styles/global.css.tsx","state/task/index.ts","state/reducers.ts","state/configureStore.ts","styles/variables.js","helpers/useEditStatus.tsx","components/NewTask/NewTask.tsx","components/Tabs/Tabs.tsx","styles/mixins.js","components/Task/Task.tsx","components/Tasks/Tasks.tsx","state/task/selectors.ts","components/App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","createGlobalStyle","Group","getRandomDeadline","moment","add","Math","round","random","subtract","format","initialState","tasks","id","nanoid","title","description","deadline","group","TODO","DOING","DONE","ActionCreators","task","type","payload","rootReducer","combineReducers","taskReducer","state","action","concat","store","configureStore","reducer","Color","useEditStatus","isEdit","setIsEdit","inputRef","useRef","useEffect","handleDocumentEscape","e","code","current","focus","document","addEventListener","removeEventListener","NewTask","dispatch","useDispatch","useState","taskTitle","setTaskTitle","addNewTask","onSubmit","preventDefault","ref","value","onBlur","onChange","target","onClick","StyledNavLink","styled","NavLink","StyledTabs","className","to","StyledTask","dateTime","isBefore","getTaskBackgroundColor","StyledTasks","map","key","getAllTasks","getTodoTasks","createSelector","filter","getDoingTasks","getDoneTasks","StyledApp","todoTasks","useSelector","shallowEqual","doingTasks","doneTasks","path","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1f3a8ddc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n  body {\n    margin: 0;\n\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    background-color: #519839;\n  }\n\n  a {\n    text-decoration: none;\n  }\n`;\n","import { nanoid } from \"nanoid\";\r\nimport moment from \"moment\";\r\n\r\nexport enum Group {\r\n  TODO = `TODO`,\r\n  DOING = `DOING`,\r\n  DONE = `DONE`,\r\n}\r\n\r\nexport interface TaskType {\r\n  deadline: string;\r\n  description: string;\r\n  title: string;\r\n}\r\n\r\nexport interface TaskTypeExt extends TaskType {\r\n  group: Group;\r\n  id: string;\r\n}\r\n\r\nexport type IState = {\r\n  tasks: Array<TaskTypeExt>;\r\n};\r\n\r\nexport const getRandomDeadline = (): string =>\r\n  moment()\r\n    .add(Math.round(Math.random() * 7), `d`)\r\n    .subtract(2, `d`)\r\n    .format(`D MMM`);\r\n\r\nconst initialState: IState = {\r\n  tasks: [\r\n    {\r\n      id: nanoid(),\r\n      title: `Task header`,\r\n      description: `Task description`,\r\n      deadline: getRandomDeadline(),\r\n      group: Group.TODO,\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      title: `Task header`,\r\n      description: `Task description`,\r\n      deadline: getRandomDeadline(),\r\n      group: Group.DOING,\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      title: `Task header`,\r\n      description: `Task description`,\r\n      deadline: getRandomDeadline(),\r\n      group: Group.DONE,\r\n    },\r\n  ],\r\n};\r\n\r\nconst ActionCreators = {\r\n  addTask: (task: TaskTypeExt) => ({\r\n    type: `ADD_TASK`,\r\n    payload: task,\r\n  }),\r\n};\r\n\r\nconst reducer = (\r\n  state = initialState,\r\n  action: { type: string; payload: any }\r\n) => {\r\n  switch (action.type) {\r\n    case `ADD_TASK`:\r\n      return {\r\n        ...state,\r\n        tasks: state.tasks.concat(action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { ActionCreators, reducer };\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { reducer as taskReducer } from \"./task/index\";\r\n\r\nconst rootReducer = combineReducers({\r\n  taskReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport default store;\r\n","const Color = {\n  grey1: `#ebecf0`,\n  blue1: `#9daae0`,\n\n  deadlineOk: `#ffffff`,\n  warning: `#f2d600`,\n  overdue: `#eb5a46`,\n};\n\nexport { Color };\n","import React, { useRef, useEffect } from \"react\";\r\n\r\ntype HookProps = {\r\n  isEdit: React.ComponentState;\r\n  setIsEdit: (newValue: boolean) => void;\r\n};\r\n\r\nconst useEditStatus = ({\r\n  isEdit,\r\n  setIsEdit,\r\n}: HookProps): React.Ref<HTMLInputElement> => {\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n  useEffect(() => {\r\n    const handleDocumentEscape = (e: KeyboardEvent): void => {\r\n      e.code === `Escape` && setIsEdit(false);\r\n    };\r\n\r\n    inputRef.current?.focus();\r\n    document.addEventListener(`keydown`, handleDocumentEscape);\r\n\r\n    return () => {\r\n      document.removeEventListener(`keydown`, handleDocumentEscape);\r\n    };\r\n  }, [isEdit, setIsEdit]);\r\n\r\n  return inputRef;\r\n};\r\n\r\nexport default useEditStatus;\r\n","import React, { FC, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nimport useEditStatus from \"../../helpers/useEditStatus\";\r\nimport { ActionCreators, Group, getRandomDeadline } from \"../../state/task\";\r\n\r\nconst NewTask: FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [taskTitle, setTaskTitle] = useState(``);\r\n  const inputRef = useEditStatus({ isEdit, setIsEdit });\r\n\r\n  const addNewTask = () => {\r\n    dispatch(\r\n      ActionCreators.addTask({\r\n        id: nanoid(),\r\n        title: taskTitle,\r\n        description: ``,\r\n        deadline: getRandomDeadline(),\r\n        group: Group.TODO,\r\n      })\r\n    );\r\n    setTaskTitle(``);\r\n  };\r\n\r\n  const handleFormSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    taskTitle && addNewTask();\r\n  };\r\n\r\n  const handleTaskTitleInput = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setTaskTitle(e.target.value);\r\n  };\r\n\r\n  const handleInputBlur = (): void => {\r\n    setIsEdit(false);\r\n\r\n    taskTitle && addNewTask();\r\n  };\r\n\r\n  const handleButtonClick = (): void => {\r\n    setIsEdit(true);\r\n  };\r\n\r\n  return isEdit ? (\r\n    <form onSubmit={handleFormSubmit}>\r\n      <input\r\n        ref={inputRef}\r\n        value={taskTitle}\r\n        onBlur={handleInputBlur}\r\n        onChange={handleTaskTitleInput}\r\n      />\r\n    </form>\r\n  ) : (\r\n    <button onClick={handleButtonClick}>Add another task</button>\r\n  );\r\n};\r\n\r\nexport default NewTask;\r\n","import { NavLink } from \"react-router-dom\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { resetList } from \"../../styles/mixins\";\nimport { Color } from \"../../styles/variables\";\n\nconst Tabs: React.FC<{ className?: string }> = ({ className }) => {\n  return (\n    <ul className={className}>\n      <li>\n        <StyledNavLink to=\"/todo\">To do</StyledNavLink>\n      </li>\n      <li>\n        <StyledNavLink to=\"/doing\">Doing</StyledNavLink>\n      </li>\n      <li>\n        <StyledNavLink to=\"/done\">Done</StyledNavLink>\n      </li>\n    </ul>\n  );\n};\n\nconst StyledNavLink = styled(NavLink)`\n  display: block;\n  padding: 5px 10px;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: inherit;\n\n  transition: background-color 200ms;\n\n  &:hover,\n  &:focus {\n    background-color: ${Color.grey1};\n    cursor: pointer;\n  }\n\n  &:active {\n    filter: opacity(70%);\n  }\n\n  &.active {\n    background-color: ${Color.grey1};\n    pointer-events: none;\n\n    &:focus {\n      background-color: ${Color.grey1};\n    }\n  }\n`;\n\nconst StyledTabs = styled(Tabs)`\n  ${resetList()}\n\n  display: grid;\n  grid-template-columns: repeat(3, max-content);\n\n  width: fit-content;\n\n  background-color: ${Color.blue1};\n`;\n\nexport default StyledTabs;\n","const resetButton = () => `\n  padding: 0;\n\n  color: inherit;\n  font: inherit;\n\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\nconst resetList = () => `\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport { resetButton, resetList };\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\n\r\nimport { TaskType } from \"../../state/task\";\r\nimport { Color } from \"../../styles/variables\";\r\n\r\nconst getTaskBackgroundColor = (deadline: string): string => {\r\n  if (moment(deadline, `D MMM`).isBefore(moment())) {\r\n    return Color.overdue;\r\n  }\r\n  if (moment(deadline, `D MMM`).isBefore(moment().add(3, `d`))) {\r\n    return Color.warning;\r\n  }\r\n\r\n  return Color.deadlineOk;\r\n};\r\n\r\nconst Task: React.FC<TaskType & { className?: string }> = ({\r\n  className,\r\n  title,\r\n  description,\r\n  deadline,\r\n}) => {\r\n  return (\r\n    <article className={className}>\r\n      <h3>{title}</h3>\r\n      <p>{description}</p>\r\n      <time dateTime={deadline}>{deadline}</time>\r\n    </article>\r\n  );\r\n};\r\n\r\nconst StyledTask = styled(Task)`\r\n  padding: 10px;\r\n\r\n  background-color: ${({ deadline }) => getTaskBackgroundColor(deadline)};\r\n  border-radius: 3px;\r\n\r\n  h3 {\r\n    margin: 0;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport default StyledTask;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Task from \"../Task/Task\";\r\nimport { resetList } from \"../../styles/mixins\";\r\nimport { TaskTypeExt } from \"../../state/task\";\r\n\r\ntype Props = {\r\n  tasks: Array<TaskTypeExt>;\r\n};\r\n\r\nconst Tasks: React.FC<Props & { className?: string }> = ({\r\n  className,\r\n  tasks,\r\n}) => {\r\n  return (\r\n    <ul className={className}>\r\n      {tasks.map((task) => (\r\n        <li key={task.id}>\r\n          <Task\r\n            title={task.title}\r\n            description={task.description}\r\n            deadline={task.deadline}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst StyledTasks = styled(Tasks)`\r\n  ${resetList()}\r\n\r\n  display: grid;\r\n  gap: 20px;\r\n\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport default StyledTasks;\r\n","import { createSelector } from \"reselect\";\r\n\r\nimport { TaskTypeExt } from \"../../state/task/index\";\r\nimport { RootState } from \"../../state/reducers\";\r\nimport { Group } from \"../../state/task/index\";\r\n\r\ntype AllTasks = (state: RootState) => Array<TaskTypeExt>;\r\n\r\nconst getAllTasks: AllTasks = (state) => state.taskReducer.tasks;\r\n\r\nexport const getTodoTasks = createSelector(\r\n  (state: RootState) => getAllTasks(state),\r\n  (tasks) => tasks.filter((task) => task.group === Group.TODO)\r\n);\r\n\r\nexport const getDoingTasks = createSelector(\r\n  (state: RootState) => getAllTasks(state),\r\n  (tasks) => tasks.filter((task) => task.group === Group.DOING)\r\n);\r\n\r\nexport const getDoneTasks = createSelector(\r\n  (state: RootState) => getAllTasks(state),\r\n  (tasks) => tasks.filter((task) => task.group === Group.DONE)\r\n);\r\n","import { Switch, Route, Redirect } from \"react-router-dom\";\nimport { useSelector, shallowEqual } from \"react-redux\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Color } from \"../../styles/variables\";\n\nimport NewTask from \"../NewTask/NewTask\";\nimport Tabs from \"../Tabs/Tabs\";\nimport Tasks from \"../Tasks/Tasks\";\n\nimport {\n  getTodoTasks,\n  getDoingTasks,\n  getDoneTasks,\n} from \"../../state/task/selectors\";\n\nconst App: React.FC<{ className?: string }> = ({ className }) => {\n  const todoTasks = useSelector(getTodoTasks, shallowEqual);\n  const doingTasks = useSelector(getDoingTasks, shallowEqual);\n  const doneTasks = useSelector(getDoneTasks, shallowEqual);\n\n  return (\n    <>\n      <h1>Task manager</h1>\n      <div className={className}>\n        <Tabs />\n        <Switch>\n          <Route path=\"/todo\">\n            <section>\n              <h2>To Do</h2>\n              <Tasks tasks={todoTasks} />\n              <NewTask />\n            </section>\n          </Route>\n          <Route path=\"/doing\">\n            <section>\n              <h2>Doing</h2>\n              <Tasks tasks={doingTasks} />\n            </section>\n          </Route>\n          <Route path=\"/done\">\n            <section>\n              <h2>Done</h2>\n              <Tasks tasks={doneTasks} />\n            </section>\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/todo\"></Redirect>\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n};\n\nconst StyledApp = styled(App)`\n  section {\n    padding: 15px;\n\n    background-color: ${Color.grey1};\n    border-radius: 0 0 5px 5px;\n  }\n\n  h2 {\n    margin: 0;\n    margin-bottom: 5px;\n  }\n`;\n\nexport default StyledApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport GlobalStyles from \"./styles/global.css\";\nimport store from \"./state/configureStore\";\n\nimport App from \"./components/App/App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}