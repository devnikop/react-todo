{"version":3,"sources":["serviceWorker.js","styles/variables.js","styles/global.css.tsx","state/task/index.ts","state/task/types.ts","state/reducers.ts","state/configureStore.ts","components/Tabs/Tabs.tsx","styles/mixins.js","helpers/helpers.ts","components/Task/Task.tsx","helpers/useEditStatus.tsx","components/TaskEdit/InputDate.tsx","components/TaskEdit/InputTitle.tsx","components/TaskEdit/TextareaDescription.tsx","components/TaskEdit/TaskEdit.tsx","components/TaskWrapper/TaskWrapper.tsx","components/Tasks/Tasks.tsx","components/NewTask/NewTask.tsx","state/task/selectors.ts","components/TasksGroup/TasksGroup.tsx","components/App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Color","createGlobalStyle","Group","getRandomDeadline","moment","add","Math","round","random","subtract","format","initialState","tasks","id","nanoid","deadline","description","group","TODO","title","DOING","DONE","ActionCreators","task","type","payload","rootReducer","combineReducers","taskReducer","state","action","concat","filter","store","configureStore","reducer","StyledNavLink","styled","NavLink","StyledTabs","className","to","getTaskBackgroundColor","isBefore","StyledTask","onClick","dateTime","useInputEditStatus","isEdit","setIsEdit","ref","useRef","useEffect","handleDocumentEscape","e","code","current","focus","document","addEventListener","removeEventListener","DateEdit","input","attrs","DatePresentation","InputDate","value","onValueChange","useState","onBlur","onChange","target","defaultValue","onFocus","TitleEdit","TitlePresentation","InputTitle","onKeyDown","key","placeholder","DescriptionEdit","textarea","DescriptionPresentation","TextareaDescription","useTextareaEditStatus","StyledTaskEdit","taskDescription","taskTitle","onDeleteClick","onLeaveClick","date","setDate","setDescription","setTitle","newValue","TaskWrapper","dispatch","useDispatch","StyledTasks","map","Input","NewTask","setTaskTitle","inputRef","addNewTask","onSubmit","preventDefault","getAllTasks","getDoingTasks","createSelector","getDoneTasks","getTodoTasks","TypeMap","Map","styledTasksGroup","useSelector","get","getDefaultTasks","getTasksSelector","shallowEqual","length","App","path","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3681aee6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const Color = {\n  grey1: `#ebecf0`,\n  blue1: `#9daae0`,\n  blue2: `#d3daf5`,\n  green1: `#93d67c`,\n\n  blueShadow1: `rgba(9, 30, 66, 0.25)`,\n\n  deadlineOk: `#ffffff`,\n  warning: `#f2d600`,\n  overdue: `#eb5a46`,\n};\n\nexport { Color };\n","import { createGlobalStyle } from \"styled-components\";\nimport { Color } from \"./variables\";\n\nexport default createGlobalStyle`\n  body {\n    margin: 0;\n\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    background-color: ${Color.green1};\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  .visually-hidden {\n    position: absolute;\n    height: 1px;\n    width: 1px;\n    overflow: hidden;\n    clip: rect(1px, 1px, 1px, 1px);\n    white-space: nowrap; /* added line */\n  }\n`;\n","import { nanoid } from \"nanoid\";\nimport moment from \"moment\";\nimport { ADD_TASK, DELETE_TASK } from \"./types\";\n\nexport enum Group {\n  DOING = `DOING`,\n  DONE = `DONE`,\n  TODO = `TODO`,\n}\n\nexport interface TaskType {\n  deadline: string;\n  title: string;\n}\n\nexport interface TaskEditType {\n  deadline: string;\n  description: string;\n  title: string;\n}\n\nexport interface TaskTypeExt extends TaskEditType {\n  group: Group;\n  id: string;\n}\n\nexport type IState = {\n  tasks: Array<TaskTypeExt>;\n};\n\nexport const getRandomDeadline = (): string =>\n  moment()\n    .add(Math.round(Math.random() * 7), `d`)\n    .subtract(2, `d`)\n    .format(`D MMM`);\n\nconst initialState: IState = {\n  tasks: [\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.TODO,\n      title: `Todo task header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.TODO,\n      title: `Todo task 2 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.TODO,\n      title: `Todo task 3 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.TODO,\n      title: `Todo task 4 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DOING,\n      title: `Doing task header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DOING,\n      title: `Doing task2 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DOING,\n      title: `Doing task 3 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DONE,\n      title: `Done task header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DONE,\n      title: `Done task 2 header`,\n    },\n    {\n      id: nanoid(),\n      deadline: getRandomDeadline(),\n      description: `This is todo task description`,\n      group: Group.DONE,\n      title: `Done task 3 header`,\n    },\n  ],\n};\n\nconst ActionCreators = {\n  addTask: (task: TaskTypeExt) => ({\n    type: ADD_TASK,\n    payload: task,\n  }),\n  deleteTask: (id: string) => ({\n    type: DELETE_TASK,\n    payload: id,\n  }),\n};\n\nconst reducer = (\n  state = initialState,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case ADD_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.concat(action.payload),\n      };\n    case DELETE_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.filter((task) => task.id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n\nexport { ActionCreators, reducer };\n","export const ADD_TASK = `ADD_TASK`;\nexport const DELETE_TASK = `DELETE_TASK`;\n","import { combineReducers } from \"redux\";\r\n\r\nimport { reducer as taskReducer } from \"./task/index\";\r\n\r\nconst rootReducer = combineReducers({\r\n  taskReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport default store;\r\n","import { NavLink } from \"react-router-dom\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Color } from \"../../styles/variables\";\nimport { resetList } from \"../../styles/mixins\";\n\nconst Tabs: React.FC<{ className?: string }> = ({ className }) => {\n  return (\n    <section className={className}>\n      <h2 className=\"visually-hidden\">Task groups</h2>\n      <ul>\n        <li>\n          <StyledNavLink to=\"/todo\">To do</StyledNavLink>\n        </li>\n        <li>\n          <StyledNavLink to=\"/doing\">Doing</StyledNavLink>\n        </li>\n        <li>\n          <StyledNavLink to=\"/done\">Done</StyledNavLink>\n        </li>\n      </ul>\n    </section>\n  );\n};\n\nconst StyledNavLink = styled(NavLink)`\n  display: block;\n  padding: 5px 10px;\n\n  font-size: 20px;\n  font-weight: bold;\n  color: inherit;\n  background-color: ${Color.blue2};\n\n  transition: background-color 200ms;\n\n  &:hover,\n  &:focus {\n    background-color: ${Color.grey1};\n    cursor: pointer;\n  }\n\n  &:active {\n    filter: opacity(70%);\n  }\n\n  &.active {\n    background-color: ${Color.blue1};\n    pointer-events: none;\n    box-shadow: inset 0 1px 0 ${Color.blueShadow1};\n\n    &:focus {\n      background-color: ${Color.blue1};\n    }\n  }\n`;\n\nconst StyledTabs = styled(Tabs)`\n  ul {\n    ${resetList()}\n\n    display: flex;\n    flex-wrap: wrap;\n    width: fit-content;\n  }\n\n  li {\n    flex-shrink: 0;\n  }\n`;\n\nexport default StyledTabs;\n","const getDefaultInput = () => `\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nconst resetButton = () => `\n  padding: 0;\n\n  color: inherit;\n  font: inherit;\n\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\nconst resetInput = () => `\n  padding: 0;\n\n  border: none;\n  background: none;\n`;\n\nconst resetList = () => `\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nconst resetTextarea = () => `\n  padding: 0;\n\n  border: none;\n  background: none;\n\n  resize: none;\n`;\n\nexport { getDefaultInput, resetButton, resetInput, resetList, resetTextarea };\n","import moment from \"moment\";\n\nimport { Color } from \"../styles/variables\";\n\nconst getTaskBackgroundColor = (deadline: string): string => {\n  if (moment(deadline, `D MMM`).isBefore(moment())) {\n    return Color.overdue;\n  }\n  if (moment(deadline, `D MMM`).isBefore(moment().add(3, `d`))) {\n    return Color.warning;\n  }\n\n  return Color.deadlineOk;\n};\n\nexport { getTaskBackgroundColor };\n","import moment from \"moment\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Color } from \"../../styles/variables\";\nimport { getTaskBackgroundColor } from \"../../helpers/helpers\";\nimport { TaskType } from \"../../state/task\";\n\ninterface Props extends TaskType {\n  onClick: () => void;\n}\n\nconst Task: React.FC<Props & { className?: string }> = ({\n  className,\n  deadline,\n  title,\n  onClick,\n}) => {\n  return (\n    <section className={className} onClick={onClick}>\n      <h3>{title}</h3>\n      <time dateTime={moment(deadline, `D MMM`).format(`YYYY-M-D`)}>\n        {deadline}\n      </time>\n    </section>\n  );\n};\n\nconst StyledTask = styled(Task)`\n  display: grid;\n  grid-auto-flow: column;\n  gap: 5%;\n  justify-content: space-between;\n  padding: 10px;\n\n  background-color: ${({ deadline }) => getTaskBackgroundColor(deadline)};\n  border-radius: 3px;\n  box-shadow: 0 1px 0 ${Color.blueShadow1};\n\n  h3 {\n    margin: 0;\n\n    overflow-wrap: anywhere;\n  }\n`;\n\nexport default StyledTask;\n","import React, { useRef, useEffect } from \"react\";\n\ntype HookProps = {\n  isEdit: React.ComponentState;\n  setIsEdit: (newValue: boolean) => void;\n};\n\nconst useInputEditStatus = ({\n  isEdit,\n  setIsEdit,\n}: HookProps): React.Ref<HTMLInputElement> => {\n  const ref = useRef<HTMLInputElement | null>(null);\n  useEffect(() => {\n    const handleDocumentEscape = (e: KeyboardEvent): void => {\n      e.code === `Escape` && setIsEdit(false);\n    };\n\n    ref.current?.focus();\n    document.addEventListener(`keydown`, handleDocumentEscape);\n\n    return () => {\n      document.removeEventListener(`keydown`, handleDocumentEscape);\n    };\n  }, [isEdit, setIsEdit]);\n\n  return ref;\n};\n\nconst useTextareaEditStatus = ({\n  isEdit,\n  setIsEdit,\n}: HookProps): React.Ref<HTMLTextAreaElement> => {\n  const ref = useRef<HTMLTextAreaElement | null>(null);\n  useEffect(() => {\n    const handleDocumentEscape = (e: KeyboardEvent): void => {\n      e.code === `Escape` && setIsEdit(false);\n    };\n\n    ref.current?.focus();\n    document.addEventListener(`keydown`, handleDocumentEscape);\n\n    return () => {\n      document.removeEventListener(`keydown`, handleDocumentEscape);\n    };\n  }, [isEdit, setIsEdit]);\n\n  return ref;\n};\n\nexport { useInputEditStatus, useTextareaEditStatus };\n","import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { useInputEditStatus } from \"../../helpers/useEditStatus\";\n\ntype Props = {\n  value: string;\n  onValueChange: (newValue: string) => void;\n};\n\nconst InputDate: React.FC<Props> = ({ value, onValueChange }) => {\n  const [isEdit, setIsEdit] = useState<boolean>(!value);\n  const ref = useInputEditStatus({\n    isEdit,\n    setIsEdit,\n  });\n\n  const handleDateBlur = (): void => {\n    setIsEdit(false);\n  };\n\n  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    onValueChange(moment(e.target.value, `YYYY-MM-DD`).format(`D MMM`));\n  };\n\n  const handleDateClick = (): void => {\n    setIsEdit(true);\n  };\n\n  const handleDateFocus = (): void => {\n    setIsEdit(true);\n  };\n\n  return (\n    <>\n      {isEdit ? (\n        <DateEdit\n          ref={ref}\n          value={moment(value, `D MMM`).format(`YYYY-MM-DD`)}\n          onBlur={handleDateBlur}\n          onChange={handleDateChange}\n        />\n      ) : (\n        <DatePresentation\n          defaultValue={moment(value, `D MMM`).format(`YYYY-MM-DD`)}\n          onClick={handleDateClick}\n          onFocus={handleDateFocus}\n        />\n      )}\n    </>\n  );\n};\n\nconst DateEdit = styled.input.attrs(() => ({\n  type: \"date\",\n}))``;\n\nconst DatePresentation = styled.input.attrs(() => ({\n  type: \"date\",\n}))`\n  background: none;\n  border: none;\n  appearance: none;\n\n  &::-webkit-calendar-picker-indicator {\n    display: none;\n  }\n`;\n\nexport default InputDate;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getDefaultInput, resetInput } from \"../../styles/mixins\";\nimport { useInputEditStatus } from \"../../helpers/useEditStatus\";\n\ntype Props = {\n  value: string;\n  onValueChange: (newValue: string) => void;\n};\n\nconst InputTitle: React.FC<Props> = ({ value, onValueChange }) => {\n  const [isEdit, setIsEdit] = useState<boolean>(!value);\n  const ref = useInputEditStatus({\n    isEdit,\n    setIsEdit,\n  });\n\n  const handleTitleBlur = (): void => {\n    setIsEdit(false);\n  };\n\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    onValueChange(e.target.value);\n  };\n\n  const handleTitleEnter = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    e.key === `Enter` && setIsEdit(false);\n  };\n\n  const handleTitleClick = (): void => {\n    setIsEdit(true);\n  };\n\n  const handleTitleFocus = (): void => {\n    setIsEdit(true);\n  };\n\n  return (\n    <>\n      {isEdit ? (\n        <TitleEdit\n          ref={ref}\n          value={value}\n          onBlur={handleTitleBlur}\n          onChange={handleTitleChange}\n          onKeyDown={handleTitleEnter}\n        />\n      ) : (\n        <TitlePresentation\n          defaultValue={value}\n          placeholder=\"Add task title\"\n          onClick={handleTitleClick}\n          onFocus={handleTitleFocus}\n        />\n      )}\n    </>\n  );\n};\n\nconst TitleEdit = styled.input`\n  ${getDefaultInput()}\n`;\n\nconst TitlePresentation = styled.input`\n  ${resetInput()}\n  ${getDefaultInput()}\n`;\n\nexport default InputTitle;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { resetTextarea } from \"../../styles/mixins\";\nimport { useTextareaEditStatus } from \"../../helpers/useEditStatus\";\n\ntype Props = {\n  value: string;\n  onValueChange: (newValue: string) => void;\n};\n\nconst TextareaDescription: React.FC<Props> = ({ value, onValueChange }) => {\n  const [isEdit, setIsEdit] = useState<boolean>(!value);\n  const ref = useTextareaEditStatus({\n    isEdit,\n    setIsEdit,\n  });\n\n  const handleDescriptionBlur = (): void => {\n    setIsEdit(false);\n  };\n\n  const handleDesriptionChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement>\n  ): void => {\n    onValueChange(e.target.value);\n  };\n\n  const handleDescriptionEnter = (\n    e: React.KeyboardEvent<HTMLTextAreaElement>\n  ): void => {\n    e.key === `Enter` && setIsEdit(false);\n  };\n\n  const handleDescriptionClick = (): void => {\n    setIsEdit(true);\n  };\n\n  const handleDescriptionFocus = (): void => {\n    setIsEdit(true);\n  };\n\n  return (\n    <>\n      {isEdit ? (\n        <DescriptionEdit\n          ref={ref}\n          value={value}\n          placeholder=\"Add a more detailed description...\"\n          onBlur={handleDescriptionBlur}\n          onChange={handleDesriptionChange}\n          onKeyDown={handleDescriptionEnter}\n        />\n      ) : (\n        <DescriptionPresentation\n          defaultValue={value}\n          placeholder=\"Add a more detailed description...\"\n          onClick={handleDescriptionClick}\n          onFocus={handleDescriptionFocus}\n        />\n      )}\n    </>\n  );\n};\n\nconst DescriptionEdit = styled.textarea`\n  resize: vertical;\n`;\n\nconst DescriptionPresentation = styled.textarea`\n  ${resetTextarea()}\n`;\n\nexport default TextareaDescription;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getTaskBackgroundColor } from \"../../helpers/helpers\";\nimport { Color } from \"../../styles/variables\";\nimport { TaskEditType } from \"../../state/task\";\n\nimport InputDate from \"./InputDate\";\nimport InputTitle from \"./InputTitle\";\nimport TextareaDescription from \"./TextareaDescription\";\n\ninterface Props extends TaskEditType {\n  onDeleteClick: () => void;\n  onLeaveClick: () => void;\n}\n\nconst TaskEdit: React.FC<Props & { className?: string }> = ({\n  className,\n  deadline,\n  description: taskDescription,\n  title: taskTitle,\n  onDeleteClick,\n  onLeaveClick,\n}) => {\n  const [date, setDate] = useState<string>(deadline);\n  const [description, setDescription] = useState<string>(taskDescription);\n  const [title, setTitle] = useState<string>(taskTitle);\n\n  const handleTitleChange = (newValue: string): void => {\n    setTitle(newValue);\n  };\n\n  const handleDateChange = (newValue: string): void => {\n    setDate(newValue);\n  };\n\n  const handleDescriptionChange = (newValue: string): void => {\n    setDescription(newValue);\n  };\n\n  return (\n    <section className={className}>\n      <InputTitle value={title} onValueChange={handleTitleChange} />\n      <InputDate value={date} onValueChange={handleDateChange} />\n      <TextareaDescription\n        value={description}\n        onValueChange={handleDescriptionChange}\n      />\n      <button type=\"button\" onClick={onLeaveClick}>\n        Leave Edit mode\n      </button>\n      <button type=\"button\" onClick={onDeleteClick}>\n        Delete task\n      </button>\n    </section>\n  );\n};\n\nconst StyledTaskEdit = styled(TaskEdit)`\n  display: grid;\n  gap: 10px;\n  padding: 10px;\n\n  background-color: ${({ deadline }) => getTaskBackgroundColor(deadline)};\n  border-radius: 3px;\n  box-shadow: 0 1px 0 ${Color.blueShadow1};\n`;\n\nexport default StyledTaskEdit;\n","import { useDispatch } from \"react-redux\";\nimport React, { useState } from \"react\";\n\nimport { ActionCreators, TaskTypeExt } from \"../../state/task\";\n\nimport Task from \"../Task/Task\";\nimport TaskEdit from \"../TaskEdit/TaskEdit\";\n\ntype Props = {\n  task: TaskTypeExt;\n};\n\nconst TaskWrapper: React.FC<Props> = ({ task }) => {\n  const dispatch = useDispatch();\n  const [isEdit, setIsEdit] = useState(false);\n\n  const handleDeleteClick = (): void => {\n    dispatch(ActionCreators.deleteTask(task.id));\n  };\n\n  const handleLeaveClick = (): void => {\n    setIsEdit(false);\n  };\n\n  const handleTaskClick = (): void => {\n    setIsEdit(true);\n  };\n\n  return isEdit ? (\n    <TaskEdit\n      deadline={task.deadline}\n      description={task.description}\n      title={task.title}\n      onDeleteClick={handleDeleteClick}\n      onLeaveClick={handleLeaveClick}\n    />\n  ) : (\n    <Task\n      deadline={task.deadline}\n      title={task.title}\n      onClick={handleTaskClick}\n    />\n  );\n};\n\nexport default TaskWrapper;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { resetList } from \"../../styles/mixins\";\nimport { TaskTypeExt } from \"../../state/task\";\n\nimport TaskWrapper from \"../TaskWrapper/TaskWrapper\";\n\ntype Props = {\n  tasks: Array<TaskTypeExt>;\n};\n\nconst Tasks: React.FC<Props & { className?: string }> = ({\n  className,\n  tasks,\n}) => {\n  return (\n    <ul className={className}>\n      {tasks.map((task) => (\n        <li key={task.id}>\n          <TaskWrapper task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst StyledTasks = styled(Tasks)`\n  ${resetList()}\n\n  display: grid;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n\nexport default StyledTasks;\n","import { nanoid } from \"nanoid\";\nimport { useDispatch } from \"react-redux\";\nimport React, { FC, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { ActionCreators, getRandomDeadline, Group } from \"../../state/task\";\nimport { getDefaultInput } from \"../../styles/mixins\";\nimport { useInputEditStatus } from \"../../helpers/useEditStatus\";\n\nconst NewTask: FC = () => {\n  const dispatch = useDispatch();\n\n  const [isEdit, setIsEdit] = useState(false);\n  const [taskTitle, setTaskTitle] = useState(``);\n  const inputRef = useInputEditStatus({ isEdit, setIsEdit });\n\n  const addNewTask = (): void => {\n    dispatch(\n      ActionCreators.addTask({\n        id: nanoid(),\n        deadline: getRandomDeadline(),\n        description: ``,\n        group: Group.TODO,\n        title: taskTitle,\n      })\n    );\n    setTaskTitle(``);\n  };\n\n  const handleFormSubmit = (e: React.SyntheticEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    taskTitle && addNewTask();\n  };\n\n  const handleInputBlur = (): void => {\n    setIsEdit(false);\n\n    taskTitle && addNewTask();\n  };\n\n  const handleTaskTitleInput = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setTaskTitle(e.target.value);\n  };\n\n  const handleButtonClick = (): void => {\n    setIsEdit(true);\n  };\n\n  return isEdit ? (\n    <form onSubmit={handleFormSubmit}>\n      <Input\n        ref={inputRef}\n        value={taskTitle}\n        placeholder=\"Add task title\"\n        onBlur={handleInputBlur}\n        onChange={handleTaskTitleInput}\n      />\n    </form>\n  ) : (\n    <button type=\"button\" onClick={handleButtonClick}>\n      Add another task\n    </button>\n  );\n};\n\nconst Input = styled.input`\n  ${getDefaultInput()}\n`;\n\nexport default NewTask;\n","import { createSelector } from \"reselect\";\n\nimport { Group } from \"../../state/task/index\";\nimport { RootState } from \"../../state/reducers\";\nimport { TaskTypeExt } from \"../../state/task/index\";\n\ntype AllTasks = (state: RootState) => Array<TaskTypeExt>;\n\nconst getAllTasks: AllTasks = (state) => state.taskReducer.tasks;\n\nexport const getDoingTasks = createSelector(\n  (state: RootState) => getAllTasks(state),\n  (tasks) => tasks.filter((task) => task.group === Group.DOING)\n);\n\nexport const getDoneTasks = createSelector(\n  (state: RootState) => getAllTasks(state),\n  (tasks) => tasks.filter((task) => task.group === Group.DONE)\n);\n\nexport const getTodoTasks = createSelector(\n  (state: RootState) => getAllTasks(state),\n  (tasks) => tasks.filter((task) => task.group === Group.TODO)\n);\n","import { shallowEqual, useSelector } from \"react-redux\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Color } from \"../../styles/variables\";\n\nimport Tasks from \"../Tasks/Tasks\";\nimport NewTask from \"../NewTask/NewTask\";\n\nimport {\n  getDoingTasks,\n  getDoneTasks,\n  getTodoTasks as getDefaultTasks,\n  getTodoTasks,\n} from \"../../state/task/selectors\";\n\ntype Props = {\n  type: string;\n};\n\nconst TypeMap = new Map([\n  [`doing`, getDoingTasks],\n  [`done`, getDoneTasks],\n  [`todo`, getTodoTasks],\n]);\n\nconst getTasksSelector = (type: string): typeof getDefaultTasks =>\n  TypeMap.get(type) || getDefaultTasks;\n\nconst TasksGroup: React.FC<Props & { className?: string }> = ({\n  className,\n  type,\n}) => {\n  const tasks = useSelector(getTasksSelector(type), shallowEqual);\n\n  return (\n    <section className={className}>\n      <h2 className=\"visually-hidden\">{type} group</h2>\n      {tasks.length ? <Tasks tasks={tasks} /> : ``}\n      <NewTask />\n    </section>\n  );\n};\n\nconst styledTasksGroup = styled(TasksGroup)`\n  padding: 25px 15px;\n\n  background-color: ${Color.grey1};\n  border-radius: 0 0 5px 5px;\n`;\n\nexport default styledTasksGroup;\n","import { Redirect, Route, Switch } from \"react-router-dom\";\nimport React from \"react\";\n\nimport Tabs from \"../Tabs/Tabs\";\nimport TasksGroup from \"../TasksGroup/TasksGroup\";\n\nconst App: React.FC<{ className?: string }> = ({ className }) => {\n  return (\n    <>\n      <h1>Task manager</h1>\n      <main className={className}>\n        <Tabs />\n        <Switch>\n          <Route path=\"/todo\">\n            <TasksGroup type={`todo`} />\n          </Route>\n          <Route path=\"/doing\">\n            <TasksGroup type={`doing`} />\n          </Route>\n          <Route path=\"/done\">\n            <TasksGroup type={`done`} />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/todo\"></Redirect>\n          </Route>\n        </Switch>\n      </main>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport GlobalStyles from \"./styles/global.css\";\nimport store from \"./state/configureStore\";\n\nimport App from \"./components/App/App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}