{"version":3,"sources":["serviceWorker.js","styles/variables.js","styles/global.css.tsx","state/task/index.ts","helpers/helpers.ts","state/reducers.ts","state/configureStore.ts","components/Tabs/Tabs.tsx","styles/mixins.js","components/Task/Task.tsx","helpers/useEditStatus.tsx","components/TaskEdit/InputDate.tsx","components/TaskEdit/InputTitle.tsx","components/TaskEdit/TextareaDescription.tsx","components/TaskEdit/TaskEdit.tsx","components/TaskWrapper/TaskWrapper.tsx","components/Tasks/Tasks.tsx","components/NewTask/NewTask.tsx","state/task/selectors.ts","components/TasksGroup/TasksGroup.tsx","components/App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Color","createGlobalStyle","Group","getTaskBackgroundColor","deadline","moment","isBefore","add","getRandomDeadline","Math","round","random","subtract","format","initialState","tasks","id","nanoid","description","group","TODO","title","DOING","DONE","createSlice","name","reducers","addTask","state","action","concat","payload","deleteTask","filter","task","updateTitle","taskId","findIndex","updateDate","date","updateDescription","updateGroup","rootReducer","combineReducers","taskReducer","reducer","store","configureStore","StyledNavLink","styled","NavLink","StyledTabs","className","to","StyledTask","onClick","dateTime","useInputEditStatus","isEdit","setIsEdit","ref","useRef","useEffect","handleDocumentEscape","e","code","current","focus","document","addEventListener","removeEventListener","DateEdit","input","attrs","type","DatePresentation","InputDate","value","onValueChange","onBlur","onChange","target","defaultValue","onFocus","TitleEdit","TitlePresentation","InputTitle","onKeyDown","key","placeholder","DescriptionEdit","textarea","DescriptionPresentation","TextareaDescription","useTextareaEditStatus","StyledTaskEdit","onDeleteClick","onLeaveClick","taskDescription","taskTitle","dispatch","useDispatch","useState","setDate","isDateEdit","setDateEdit","setDescription","isDescriptionEdit","setDescriptionEdit","setTitle","isTitleEdit","setTitleEdit","actions","newValue","TaskWrapper","StyledTasks","map","Input","NewTask","setTaskTitle","inputRef","addNewTask","onSubmit","preventDefault","getAllTasks","getDoingTasks","createSelector","getDoneTasks","getTodoTasks","TypeMap","Map","styledTasksGroup","useSelector","get","getDefaultTasks","getTasksSelector","shallowEqual","length","App","path","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d58a29b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const Color = {\r\n  grey1: `#ebecf0`,\r\n  blue1: `#9daae0`,\r\n  blue2: `#d3daf5`,\r\n  green1: `#93d67c`,\r\n\r\n  blueShadow1: `rgba(9, 30, 66, 0.25)`,\r\n\r\n  deadlineOk: `#ffffff`,\r\n  warning: `#f2d600`,\r\n  overdue: `#eb5a46`,\r\n};\r\n\r\nexport { Color };\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport { Color } from \"./variables\";\r\n\r\nexport default createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n\r\n    background-color: ${Color.green1};\r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n\r\n  .visually-hidden {\r\n    position: absolute;\r\n    height: 1px;\r\n    width: 1px;\r\n    overflow: hidden;\r\n    clip: rect(1px, 1px, 1px, 1px);\r\n    white-space: nowrap; /* added line */\r\n  }\r\n`;\r\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nimport { getRandomDeadline } from \"../../helpers/helpers\";\r\n\r\nexport enum Group {\r\n  DOING = `DOING`,\r\n  DONE = `DONE`,\r\n  TODO = `TODO`,\r\n}\r\n\r\nexport interface TaskType {\r\n  deadline: string;\r\n  title: string;\r\n}\r\n\r\nexport interface TaskEditType {\r\n  deadline: string;\r\n  description: string;\r\n  group: Group;\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\nexport type IState = {\r\n  tasks: Array<TaskEditType>;\r\n};\r\n\r\nconst initialState: IState = {\r\n  tasks: [\r\n    {\r\n      id: nanoid(),\r\n      deadline: getRandomDeadline(),\r\n      description: `This is todo task description`,\r\n      group: Group.TODO,\r\n      title: `Todo task header`,\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      deadline: getRandomDeadline(),\r\n      description: `This is todo task description`,\r\n      group: Group.TODO,\r\n      title: `Todo task 2 header`,\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      deadline: getRandomDeadline(),\r\n      description: `This is todo task description`,\r\n      group: Group.TODO,\r\n      title: `Todo task 3 header`,\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      deadline: getRandomDeadline(),\r\n      description: `This is todo task description`,\r\n      group: Group.TODO,\r\n      title: `Todo task 4 header`,\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      deadline: getRandomDeadline(),\r\n      description: `This is todo task description`,\r\n      group: Group.DOING,\r\n      title: `Doing task header`,\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      deadline: getRandomDeadline(),\r\n      description: `This is todo task description`,\r\n      group: Group.DOING,\r\n      title: `Doing task2 header`,\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      deadline: getRandomDeadline(),\r\n      description: `This is todo task description`,\r\n      group: Group.DOING,\r\n      title: `Doing task 3 header`,\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      deadline: getRandomDeadline(),\r\n      description: `This is todo task description`,\r\n      group: Group.DONE,\r\n      title: `Done task header`,\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      deadline: getRandomDeadline(),\r\n      description: `This is todo task description`,\r\n      group: Group.DONE,\r\n      title: `Done task 2 header`,\r\n    },\r\n    {\r\n      id: nanoid(),\r\n      deadline: getRandomDeadline(),\r\n      description: `This is todo task description`,\r\n      group: Group.DONE,\r\n      title: `Done task 3 header`,\r\n    },\r\n  ],\r\n};\r\n\r\nconst addTask: CaseReducer<IState, PayloadAction<TaskEditType>> = (\r\n  state,\r\n  action\r\n) => ({\r\n  ...state,\r\n  tasks: state.tasks.concat(action.payload),\r\n});\r\n\r\nconst deleteTask: CaseReducer<IState, PayloadAction<string>> = (\r\n  state,\r\n  action\r\n) => ({\r\n  ...state,\r\n  tasks: state.tasks.filter((task) => task.id !== action.payload),\r\n});\r\n\r\nconst updateTitle: CaseReducer<\r\n  IState,\r\n  PayloadAction<{ id: string; title: string }>\r\n> = (state, action) => {\r\n  const { id, title } = action.payload;\r\n  const taskId = state.tasks.findIndex((task) => task.id === id);\r\n  state.tasks[taskId].title = title;\r\n};\r\n\r\nconst updateDate: CaseReducer<\r\n  IState,\r\n  PayloadAction<{ id: string; date: string }>\r\n> = (state, action) => {\r\n  const { id, date } = action.payload;\r\n  const taskId = state.tasks.findIndex((task) => task.id === id);\r\n  state.tasks[taskId].deadline = date;\r\n};\r\n\r\nconst updateDescription: CaseReducer<\r\n  IState,\r\n  PayloadAction<{ id: string; description: string }>\r\n> = (state, action) => {\r\n  const { id, description } = action.payload;\r\n  const taskId = state.tasks.findIndex((task) => task.id === id);\r\n  state.tasks[taskId].description = description;\r\n};\r\n\r\nconst updateGroup: CaseReducer<\r\n  IState,\r\n  PayloadAction<{ id: string; group: Group }>\r\n> = (state, action) => {\r\n  const { id, group } = action.payload;\r\n  const taskId = state.tasks.findIndex((task) => task.id === id);\r\n  state.tasks[taskId].group = group;\r\n};\r\n\r\nexport const tasks = createSlice({\r\n  name: \"tasks\",\r\n  initialState,\r\n  reducers: {\r\n    addTask,\r\n    deleteTask,\r\n    updateTitle,\r\n    updateDate,\r\n    updateDescription,\r\n    updateGroup,\r\n  },\r\n});\r\n","import moment from \"moment\";\r\n\r\nimport { Color } from \"../styles/variables\";\r\n\r\nconst getTaskBackgroundColor = (deadline: string): string => {\r\n  if (moment(deadline, `D MMM`).isBefore(moment())) {\r\n    return Color.overdue;\r\n  }\r\n  if (moment(deadline, `D MMM`).isBefore(moment().add(3, `d`))) {\r\n    return Color.warning;\r\n  }\r\n\r\n  return Color.deadlineOk;\r\n};\r\n\r\nconst getRandomDeadline = (): string =>\r\n  moment()\r\n    .add(Math.round(Math.random() * 7), `d`)\r\n    .subtract(2, `d`)\r\n    .format(`D MMM`);\r\n\r\nexport { getTaskBackgroundColor, getRandomDeadline };\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { tasks } from \"./task/index\";\r\n\r\nconst rootReducer = combineReducers({\r\n  taskReducer: tasks.reducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport default store;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { Color } from \"../../styles/variables\";\r\nimport { resetList } from \"../../styles/mixins\";\r\n\r\nconst Tabs: React.FC<{ className?: string }> = ({ className }) => {\r\n  return (\r\n    <section className={className}>\r\n      <h2 className=\"visually-hidden\">Task groups</h2>\r\n      <ul>\r\n        <li>\r\n          <StyledNavLink to=\"/todo\">To do</StyledNavLink>\r\n        </li>\r\n        <li>\r\n          <StyledNavLink to=\"/doing\">Doing</StyledNavLink>\r\n        </li>\r\n        <li>\r\n          <StyledNavLink to=\"/done\">Done</StyledNavLink>\r\n        </li>\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst StyledNavLink = styled(NavLink)`\r\n  display: block;\r\n  padding: 5px 10px;\r\n\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: inherit;\r\n  background-color: ${Color.blue2};\r\n\r\n  transition: background-color 200ms;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: ${Color.grey1};\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    filter: opacity(70%);\r\n  }\r\n\r\n  &.active {\r\n    background-color: ${Color.blue1};\r\n    pointer-events: none;\r\n    box-shadow: inset 0 1px 0 ${Color.blueShadow1};\r\n\r\n    &:focus {\r\n      background-color: ${Color.blue1};\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledTabs = styled(Tabs)`\r\n  ul {\r\n    ${resetList()}\r\n\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: fit-content;\r\n  }\r\n\r\n  li {\r\n    flex-shrink: 0;\r\n  }\r\n`;\r\n\r\nexport default StyledTabs;\r\n","const getDefaultInput = () => `\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst resetButton = () => `\r\n  padding: 0;\r\n\r\n  color: inherit;\r\n  font: inherit;\r\n\r\n  background-color: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst resetInput = () => `\r\n  padding: 0;\r\n\r\n  border: none;\r\n  background: none;\r\n`;\r\n\r\nconst resetList = () => `\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n`;\r\n\r\nconst resetTextarea = () => `\r\n  padding: 0;\r\n\r\n  border: none;\r\n  background: none;\r\n\r\n  resize: none;\r\n`;\r\n\r\nexport { getDefaultInput, resetButton, resetInput, resetList, resetTextarea };\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { Color } from \"../../styles/variables\";\r\nimport { getTaskBackgroundColor } from \"../../helpers/helpers\";\r\nimport { TaskType } from \"../../state/task\";\r\n\r\ninterface Props extends TaskType {\r\n  onClick: () => void;\r\n}\r\n\r\nconst Task: React.FC<Props & { className?: string }> = ({\r\n  className,\r\n  deadline,\r\n  title,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <section className={className} onClick={onClick}>\r\n      <h3>{title}</h3>\r\n      <time dateTime={moment(deadline, `D MMM`).format(`YYYY-M-D`)}>\r\n        {deadline}\r\n      </time>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst StyledTask = styled(Task)`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  gap: 5%;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n\r\n  background-color: ${({ deadline }) => getTaskBackgroundColor(deadline)};\r\n  border-radius: 3px;\r\n  box-shadow: 0 1px 0 ${Color.blueShadow1};\r\n\r\n  cursor: pointer;\r\n\r\n  h3 {\r\n    margin: 0;\r\n\r\n    overflow-wrap: anywhere;\r\n  }\r\n`;\r\n\r\nexport default StyledTask;\r\n","import React, { useRef, useEffect } from \"react\";\r\n\r\ntype HookProps = {\r\n  isEdit: React.ComponentState;\r\n  setIsEdit: (newValue: boolean) => void;\r\n};\r\n\r\nconst useInputEditStatus = ({\r\n  isEdit,\r\n  setIsEdit,\r\n}: HookProps): React.Ref<HTMLInputElement> => {\r\n  const ref = useRef<HTMLInputElement | null>(null);\r\n  useEffect(() => {\r\n    const handleDocumentEscape = (e: KeyboardEvent): void => {\r\n      e.code === `Escape` && setIsEdit(false);\r\n    };\r\n\r\n    ref.current?.focus();\r\n    document.addEventListener(`keydown`, handleDocumentEscape);\r\n\r\n    return () => {\r\n      document.removeEventListener(`keydown`, handleDocumentEscape);\r\n    };\r\n  }, [isEdit, setIsEdit]);\r\n\r\n  return ref;\r\n};\r\n\r\nconst useTextareaEditStatus = ({\r\n  isEdit,\r\n  setIsEdit,\r\n}: HookProps): React.Ref<HTMLTextAreaElement> => {\r\n  const ref = useRef<HTMLTextAreaElement | null>(null);\r\n  useEffect(() => {\r\n    const handleDocumentEscape = (e: KeyboardEvent): void => {\r\n      e.code === `Escape` && setIsEdit(false);\r\n    };\r\n\r\n    ref.current?.focus();\r\n    document.addEventListener(`keydown`, handleDocumentEscape);\r\n\r\n    return () => {\r\n      document.removeEventListener(`keydown`, handleDocumentEscape);\r\n    };\r\n  }, [isEdit, setIsEdit]);\r\n\r\n  return ref;\r\n};\r\n\r\nexport { useInputEditStatus, useTextareaEditStatus };\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { useInputEditStatus } from \"../../helpers/useEditStatus\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  isEdit: boolean;\r\n  setIsEdit: (newValue: boolean) => void;\r\n  onValueChange: (newValue: string) => void;\r\n};\r\n\r\nconst InputDate: React.FC<Props> = ({\r\n  value,\r\n  isEdit,\r\n  setIsEdit,\r\n  onValueChange,\r\n}) => {\r\n  const ref = useInputEditStatus({\r\n    isEdit,\r\n    setIsEdit,\r\n  });\r\n\r\n  const handleDateBlur = (): void => {\r\n    setIsEdit(false);\r\n  };\r\n\r\n  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    onValueChange(moment(e.target.value, `YYYY-MM-DD`).format(`D MMM`));\r\n  };\r\n\r\n  const handleDateClick = (): void => {\r\n    setIsEdit(true);\r\n  };\r\n\r\n  const handleDateFocus = (): void => {\r\n    setIsEdit(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isEdit ? (\r\n        <DateEdit\r\n          ref={ref}\r\n          value={moment(value, `D MMM`).format(`YYYY-MM-DD`)}\r\n          onBlur={handleDateBlur}\r\n          onChange={handleDateChange}\r\n        />\r\n      ) : (\r\n        <DatePresentation\r\n          defaultValue={moment(value, `D MMM`).format(`YYYY-MM-DD`)}\r\n          onClick={handleDateClick}\r\n          onFocus={handleDateFocus}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst DateEdit = styled.input.attrs(() => ({\r\n  type: \"date\",\r\n}))``;\r\n\r\nconst DatePresentation = styled.input.attrs(() => ({\r\n  type: \"date\",\r\n}))`\r\n  background: none;\r\n  border: none;\r\n  appearance: none;\r\n\r\n  &::-webkit-calendar-picker-indicator {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport default InputDate;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { getDefaultInput, resetInput } from \"../../styles/mixins\";\r\nimport { useInputEditStatus } from \"../../helpers/useEditStatus\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  isEdit: boolean;\r\n  setIsEdit: (newValue: boolean) => void;\r\n  onValueChange: (newValue: string) => void;\r\n};\r\n\r\nconst InputTitle: React.FC<Props> = ({\r\n  value,\r\n  isEdit,\r\n  setIsEdit,\r\n  onValueChange,\r\n}) => {\r\n  const ref = useInputEditStatus({\r\n    isEdit,\r\n    setIsEdit,\r\n  });\r\n\r\n  const handleTitleBlur = (): void => {\r\n    setIsEdit(false);\r\n  };\r\n\r\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    onValueChange(e.target.value);\r\n  };\r\n\r\n  const handleTitleEnter = (e: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    e.key === `Enter` && setIsEdit(false);\r\n  };\r\n\r\n  const handleTitleClick = (): void => {\r\n    setIsEdit(true);\r\n  };\r\n\r\n  const handleTitleFocus = (): void => {\r\n    setIsEdit(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isEdit ? (\r\n        <TitleEdit\r\n          ref={ref}\r\n          value={value}\r\n          onBlur={handleTitleBlur}\r\n          onChange={handleTitleChange}\r\n          onKeyDown={handleTitleEnter}\r\n        />\r\n      ) : (\r\n        <TitlePresentation\r\n          defaultValue={value}\r\n          placeholder=\"Add task title\"\r\n          onClick={handleTitleClick}\r\n          onFocus={handleTitleFocus}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst TitleEdit = styled.input`\r\n  ${getDefaultInput()}\r\n`;\r\n\r\nconst TitlePresentation = styled.input`\r\n  ${resetInput()}\r\n  ${getDefaultInput()}\r\n`;\r\n\r\nexport default InputTitle;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { resetTextarea } from \"../../styles/mixins\";\r\nimport { useTextareaEditStatus } from \"../../helpers/useEditStatus\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  isEdit: boolean;\r\n  setIsEdit: (newValue: boolean) => void;\r\n  onValueChange: (newValue: string) => void;\r\n};\r\n\r\nconst TextareaDescription: React.FC<Props> = ({\r\n  value,\r\n  isEdit,\r\n  setIsEdit,\r\n  onValueChange,\r\n}) => {\r\n  const ref = useTextareaEditStatus({\r\n    isEdit,\r\n    setIsEdit,\r\n  });\r\n\r\n  const handleDescriptionBlur = (): void => {\r\n    setIsEdit(false);\r\n  };\r\n\r\n  const handleDesriptionChange = (\r\n    e: React.ChangeEvent<HTMLTextAreaElement>\r\n  ): void => {\r\n    onValueChange(e.target.value);\r\n  };\r\n\r\n  const handleDescriptionEnter = (\r\n    e: React.KeyboardEvent<HTMLTextAreaElement>\r\n  ): void => {\r\n    e.key === `Enter` && setIsEdit(false);\r\n  };\r\n\r\n  const handleDescriptionClick = (): void => {\r\n    setIsEdit(true);\r\n  };\r\n\r\n  const handleDescriptionFocus = (): void => {\r\n    setIsEdit(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isEdit ? (\r\n        <DescriptionEdit\r\n          ref={ref}\r\n          value={value}\r\n          placeholder=\"Add a more detailed description...\"\r\n          onBlur={handleDescriptionBlur}\r\n          onChange={handleDesriptionChange}\r\n          onKeyDown={handleDescriptionEnter}\r\n        />\r\n      ) : (\r\n        <DescriptionPresentation\r\n          defaultValue={value}\r\n          placeholder=\"Add a more detailed description...\"\r\n          onClick={handleDescriptionClick}\r\n          onFocus={handleDescriptionFocus}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst DescriptionEdit = styled.textarea`\r\n  resize: vertical;\r\n`;\r\n\r\nconst DescriptionPresentation = styled.textarea`\r\n  ${resetTextarea()}\r\n`;\r\n\r\nexport default TextareaDescription;\r\n","import { useDispatch } from \"react-redux\";\r\nimport React, { useState, useEffect, ChangeEvent } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { getTaskBackgroundColor } from \"../../helpers/helpers\";\r\nimport { Color } from \"../../styles/variables\";\r\nimport { TaskEditType, tasks, Group } from \"../../state/task\";\r\n\r\nimport InputDate from \"./InputDate\";\r\nimport InputTitle from \"./InputTitle\";\r\nimport TextareaDescription from \"./TextareaDescription\";\r\n\r\ninterface Props {\r\n  task: TaskEditType;\r\n  onDeleteClick: () => void;\r\n  onLeaveClick: () => void;\r\n}\r\n\r\nconst TaskEdit: React.FC<Props & { className?: string }> = ({\r\n  className,\r\n  task,\r\n  onDeleteClick,\r\n  onLeaveClick,\r\n}) => {\r\n  const {\r\n    deadline,\r\n    description: taskDescription,\r\n    group,\r\n    id,\r\n    title: taskTitle,\r\n  } = task;\r\n  const dispatch = useDispatch();\r\n\r\n  const [date, setDate] = useState<string>(deadline);\r\n  const [isDateEdit, setDateEdit] = useState<boolean>(!date);\r\n  const [description, setDescription] = useState<string>(taskDescription);\r\n  const [isDescriptionEdit, setDescriptionEdit] = useState<boolean>(\r\n    !description\r\n  );\r\n  const [title, setTitle] = useState<string>(taskTitle);\r\n  const [isTitleEdit, setTitleEdit] = useState<boolean>(!title);\r\n\r\n  useEffect(() => {\r\n    !isTitleEdit &&\r\n      dispatch(\r\n        tasks.actions.updateTitle({\r\n          id,\r\n          title,\r\n        })\r\n      );\r\n  }, [isTitleEdit]);\r\n\r\n  useEffect(() => {\r\n    !isDateEdit &&\r\n      dispatch(\r\n        tasks.actions.updateDate({\r\n          id,\r\n          date,\r\n        })\r\n      );\r\n  }, [isDateEdit]);\r\n\r\n  useEffect(() => {\r\n    !isDescriptionEdit &&\r\n      dispatch(\r\n        tasks.actions.updateDescription({\r\n          id,\r\n          description,\r\n        })\r\n      );\r\n  }, [isDescriptionEdit]);\r\n\r\n  const handleTitleChange = (newValue: string): void => {\r\n    setTitle(newValue);\r\n  };\r\n\r\n  const handleDateChange = (newValue: string): void => {\r\n    setDate(newValue);\r\n  };\r\n\r\n  const handleDescriptionChange = (newValue: string): void => {\r\n    setDescription(newValue);\r\n  };\r\n\r\n  const handleGroupChange = (e: ChangeEvent<HTMLSelectElement>): void => {\r\n    const group = e.target.value as Group;\r\n    dispatch(\r\n      tasks.actions.updateGroup({\r\n        id,\r\n        group,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className={className}>\r\n      <InputTitle\r\n        value={title}\r\n        isEdit={isTitleEdit}\r\n        setIsEdit={setTitleEdit}\r\n        onValueChange={handleTitleChange}\r\n      />\r\n      <InputDate\r\n        value={date}\r\n        isEdit={isDateEdit}\r\n        setIsEdit={setDateEdit}\r\n        onValueChange={handleDateChange}\r\n      />\r\n      <TextareaDescription\r\n        value={description}\r\n        isEdit={isDescriptionEdit}\r\n        setIsEdit={setDescriptionEdit}\r\n        onValueChange={handleDescriptionChange}\r\n      />\r\n      <label>\r\n        <span>Move to </span>\r\n        <select value={group} onChange={handleGroupChange}>\r\n          <option value={Group.TODO}>To do</option>\r\n          <option value={Group.DONE}>Done</option>\r\n          <option value={Group.DOING}>Doing</option>\r\n        </select>\r\n      </label>\r\n      <button type=\"button\" onClick={onLeaveClick}>\r\n        Leave Edit mode\r\n      </button>\r\n      <button type=\"button\" onClick={onDeleteClick}>\r\n        Delete task\r\n      </button>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst StyledTaskEdit = styled(TaskEdit)`\r\n  display: grid;\r\n  gap: 10px;\r\n  padding: 10px;\r\n\r\n  background-color: ${({ task }) => getTaskBackgroundColor(task.deadline)};\r\n  border-radius: 3px;\r\n  box-shadow: 0 1px 0 ${Color.blueShadow1};\r\n`;\r\n\r\nexport default StyledTaskEdit;\r\n","import { useDispatch } from \"react-redux\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { tasks, TaskEditType } from \"../../state/task\";\r\n\r\nimport Task from \"../Task/Task\";\r\nimport TaskEdit from \"../TaskEdit/TaskEdit\";\r\n\r\ntype Props = {\r\n  task: TaskEditType;\r\n};\r\n\r\nconst TaskWrapper: React.FC<Props> = ({ task }) => {\r\n  const dispatch = useDispatch();\r\n  const [isEdit, setIsEdit] = useState(false);\r\n\r\n  const handleDeleteClick = (): void => {\r\n    dispatch(tasks.actions.deleteTask(task.id));\r\n  };\r\n\r\n  const handleLeaveClick = (): void => {\r\n    setIsEdit(false);\r\n  };\r\n\r\n  const handleTaskClick = (): void => {\r\n    setIsEdit(true);\r\n  };\r\n\r\n  return isEdit ? (\r\n    <TaskEdit\r\n      task={task}\r\n      onDeleteClick={handleDeleteClick}\r\n      onLeaveClick={handleLeaveClick}\r\n    />\r\n  ) : (\r\n    <Task\r\n      deadline={task.deadline}\r\n      title={task.title}\r\n      onClick={handleTaskClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TaskWrapper;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { resetList } from \"../../styles/mixins\";\r\nimport { TaskEditType } from \"../../state/task\";\r\n\r\nimport TaskWrapper from \"../TaskWrapper/TaskWrapper\";\r\n\r\ntype Props = {\r\n  tasks: Array<TaskEditType>;\r\n};\r\n\r\nconst Tasks: React.FC<Props & { className?: string }> = ({\r\n  className,\r\n  tasks,\r\n}) => {\r\n  return (\r\n    <ul className={className}>\r\n      {tasks.map((task) => (\r\n        <li key={task.id}>\r\n          <TaskWrapper task={task} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst StyledTasks = styled(Tasks)`\r\n  ${resetList()}\r\n\r\n  display: grid;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport default StyledTasks;\r\n","import { nanoid } from \"nanoid\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { tasks, Group } from \"../../state/task\";\r\nimport { getDefaultInput } from \"../../styles/mixins\";\r\nimport { useInputEditStatus } from \"../../helpers/useEditStatus\";\r\nimport { getRandomDeadline } from \"../../helpers/helpers\";\r\n\r\nconst NewTask: React.FC<{ group: Group }> = ({ group }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [taskTitle, setTaskTitle] = useState(``);\r\n  const inputRef = useInputEditStatus({ isEdit, setIsEdit });\r\n\r\n  const addNewTask = (): void => {\r\n    dispatch(\r\n      tasks.actions.addTask({\r\n        id: nanoid(),\r\n        deadline: getRandomDeadline(),\r\n        description: ``,\r\n        group: group,\r\n        title: taskTitle,\r\n      })\r\n    );\r\n    setTaskTitle(``);\r\n  };\r\n\r\n  const handleFormSubmit = (e: React.SyntheticEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n    taskTitle && addNewTask();\r\n  };\r\n\r\n  const handleInputBlur = (): void => {\r\n    setIsEdit(false);\r\n\r\n    taskTitle && addNewTask();\r\n  };\r\n\r\n  const handleTaskTitleInput = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setTaskTitle(e.target.value);\r\n  };\r\n\r\n  const handleButtonClick = (): void => {\r\n    setIsEdit(true);\r\n  };\r\n\r\n  return isEdit ? (\r\n    <form onSubmit={handleFormSubmit}>\r\n      <Input\r\n        ref={inputRef}\r\n        value={taskTitle}\r\n        placeholder=\"Add task title\"\r\n        onBlur={handleInputBlur}\r\n        onChange={handleTaskTitleInput}\r\n      />\r\n    </form>\r\n  ) : (\r\n    <button type=\"button\" onClick={handleButtonClick}>\r\n      Add another task\r\n    </button>\r\n  );\r\n};\r\n\r\nconst Input = styled.input`\r\n  ${getDefaultInput()}\r\n`;\r\n\r\nexport default NewTask;\r\n","import { createSelector } from \"reselect\";\r\n\r\nimport { Group, TaskEditType } from \"../../state/task/index\";\r\nimport { RootState } from \"../../state/reducers\";\r\n\r\ntype AllTasks = (state: RootState) => Array<TaskEditType>;\r\n\r\nconst getAllTasks: AllTasks = (state) => state.taskReducer.tasks;\r\n\r\nexport const getDoingTasks = createSelector(\r\n  (state: RootState) => getAllTasks(state),\r\n  (tasks) => tasks.filter((task) => task.group === Group.DOING)\r\n);\r\n\r\nexport const getDoneTasks = createSelector(\r\n  (state: RootState) => getAllTasks(state),\r\n  (tasks) => tasks.filter((task) => task.group === Group.DONE)\r\n);\r\n\r\nexport const getTodoTasks = createSelector(\r\n  (state: RootState) => getAllTasks(state),\r\n  (tasks) => tasks.filter((task) => task.group === Group.TODO)\r\n);\r\n","import { shallowEqual, useSelector } from \"react-redux\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { Color } from \"../../styles/variables\";\r\n\r\nimport Tasks from \"../Tasks/Tasks\";\r\nimport NewTask from \"../NewTask/NewTask\";\r\n\r\nimport {\r\n  getDoingTasks,\r\n  getDoneTasks,\r\n  getTodoTasks as getDefaultTasks,\r\n  getTodoTasks,\r\n} from \"../../state/task/selectors\";\r\n\r\ntype Props = {\r\n  type: string;\r\n};\r\n\r\nconst TypeMap = new Map([\r\n  [`doing`, getDoingTasks],\r\n  [`done`, getDoneTasks],\r\n  [`todo`, getTodoTasks],\r\n]);\r\n\r\nconst getTasksSelector = (type: string): typeof getDefaultTasks =>\r\n  TypeMap.get(type) || getDefaultTasks;\r\n\r\nconst TasksGroup: React.FC<Props & { className?: string }> = ({\r\n  className,\r\n  type,\r\n}) => {\r\n  const tasks = useSelector(getTasksSelector(type), shallowEqual);\r\n\r\n  return (\r\n    <section className={className}>\r\n      <h2 className=\"visually-hidden\">{type} group</h2>\r\n      {tasks.length ? <Tasks tasks={tasks} /> : ``}\r\n      <NewTask group={tasks[0].group} />\r\n    </section>\r\n  );\r\n};\r\n\r\nconst styledTasksGroup = styled(TasksGroup)`\r\n  min-width: 320px;\r\n  max-width: 400px;\r\n\r\n  padding: 25px 15px;\r\n  box-sizing: border-box;\r\n\r\n  background-color: ${Color.grey1};\r\n  border-radius: 0 0 5px 5px;\r\n`;\r\n\r\nexport default styledTasksGroup;\r\n","import { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nimport Tabs from \"../Tabs/Tabs\";\r\nimport TasksGroup from \"../TasksGroup/TasksGroup\";\r\n\r\nconst App: React.FC<{ className?: string }> = ({ className }) => {\r\n  return (\r\n    <>\r\n      <h1>Task manager</h1>\r\n      <main className={className}>\r\n        <Tabs />\r\n        <Switch>\r\n          <Route path=\"/todo\">\r\n            <TasksGroup type={`todo`} />\r\n          </Route>\r\n          <Route path=\"/doing\">\r\n            <TasksGroup type={`doing`} />\r\n          </Route>\r\n          <Route path=\"/done\">\r\n            <TasksGroup type={`done`} />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Redirect to=\"/todo\"></Redirect>\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport GlobalStyles from \"./styles/global.css\";\r\nimport store from \"./state/configureStore\";\r\n\r\nimport App from \"./components/App/App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyles />\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}